{
    "Amplify Predictions Import": {
        "prefix": "Predictions.import",
        "scope": "javascript,javascriptreact,typescript",
        "body": [
            "import Amplify from 'aws-amplify';"
        ]
    },
    "Amplify Predictions Import Configurations": {
        "prefix": "Predictions.importconfig",
        "scope": "javascript,javascriptreact,typescript",
        "body": [
            "import Predictions, { AmazonAIPredictionsProvider } from '@aws-amplify/predictions';",
            "import awsconfig from './aws-exports';\n",

            "Amplify.configure(awsconfig);",
            "Amplify.addPluggable(new AmazonAIPredictionsProvider());"
        ]
    },
	"Amplify Predictions Configuration": {
		"prefix": "Predictions.config",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Amplify.configure({",
                "\t// To use Predictions, you need to configure the Auth module with your Cognito Identity Pool",
                "\t\"Auth\": {",
                "\t\t\"identityPoolId\": ${1:\"us-east-1:xxx-xxx-xxx-xxx-xxx\"},",
                "\t\t\"region\": ${2:\"us-east-1\"}",
                "\t},",
                "\t\"predictions\": {",
                "\t\t\"convert\": {",
                "\t\t\t\"translateText\": {",
                "\t\t\t\t\"region\": ${3:\"us-east-1\"},",
                "\t\t\t\t\"proxy\": ${4:false},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for translate Language and can be changed to your desired values",
                "\t\t\t\t\t\"sourceLanguage\": ${5:\"en\"},",
                "\t\t\t\t\t\"targetLanguage\": ${6:\"zh\"}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t\"speechGenerator\": {",
                "\t\t\t\t\"region\": ${7:\"us-east-1\"},",
                "\t\t\t\t\"proxy\": ${8:false},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for speechGenerator and can be changed to your desired values",
                "\t\t\t\t\t\"VoiceId\": ${9:\"Ivy\"},",
                "\t\t\t\t\t\"LanguageCode\": ${10:\"en-US\"}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t\"transcription\": {",
                "\t\t\t\t\"region\": ${11:\"us-east-1\"},",
                "\t\t\t\t\"proxy\": ${12:false},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for transcription and can be changed to your desired values",
                "\t\t\t\t\t\"language\": ${13:\"en-US\"}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t\"identify\": {",
                "\t\t\t\"identifyText\": {",
                "\t\t\t\t\"proxy\": ${14:false},",
                "\t\t\t\t\"region\": ${15:\"us-east-1\"},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for text identity and can be changed to your desired values",
                "\t\t\t\t\t\"format\": ${16:\"PLAIN\"}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t\"identifyEntities\": {",
                "\t\t\t\t\"proxy\": ${17:false},",
                "\t\t\t\t\"region\": ${16: \"us-east-1\"},",
                "\t\t\t\t\"celebrityDetectionEnabled\": ${16:true},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for entity identification and can be changed to your desired values",
                "\t\t\t\t\t\"collectionId\": ${17:\"identifyEntities8b89c648-test\"},",
                "\t\t\t\t\t\"maxEntities\": ${18:50}",
                "\t\t\t\t}",
                "\t\t\t},",
                "\t\t\t\"identifyLabels\": {",
                "\t\t\t\t\"proxy\": ${19:false},",
                "\t\t\t\t\"region\": ${18:\"us-east-1\"},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for labels identification and can be changed to your desired values",
                "\t\t\t\t\t\"type\": ${19:\"LABELS\"}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t},",
                "\t\t\"interpret\": {",
                "\t\t\t\"interpretText\": {",
                "\t\t\t\t\"region\": ${20:\"us-east-1\"},",
                "\t\t\t\t\"proxy\": ${21:false},",
                "\t\t\t\t\"defaults\": {  //The below values are default values for text interpretation and can be changed to your desired values",
                "\t\t\t\t\t\"type\": ${22:\"ALL\"}",
                "\t\t\t\t}",
                "\t\t\t}",
                "\t\t}",
                "\t}",
			"})"
		]
	},
	"Amplify Predictions TextToSpeech": {
		"prefix": "Predictions.textToSpeech",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.convert({",
                "\ttextToSpeech: {",
                "\t\tsource: {",
                "\t\t\ttext: ${1:textToGenerateSpeech},",
                "\t\t},",
                "\t\tvoiceId: ${2:\"Amy\"} // default configured on aws-exports.js",
                "\t\t// list of different options are here https://docs.aws.amazon.com/polly/latest/dg/voicelist.html",
                "\t}",
			"})"
		]
	},
	"Amplify Predictions Transcription": {
		"prefix": "Predictions.transcription",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.convert({",
                "\ttranscription: {",
                "\t\tsource: {",
                "\t\t\t${1:bytes}",
                "\t\t},",
                "\t\t// language: \"${2:en-US}\", // other options are \"en-GB\", \"fr-FR\", \"fr-CA\", \"es-US\"",
                "\t}",
			"})"
		]
	},
	"Amplify Predictions TranslateText": {
		"prefix": "Predictions.translateText",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.convert({",
                "\ttranslateText: {",
                "\t\tsource: {",
                "\t\t\ttext: ${1:\"\"},",
                "\t\t\t language : \"${2:es}\" // defaults configured on aws-exports.js",
                "\t\t\t// supported languages https://docs.aws.amazon.com/translate/latest/dg/how-it-works.html#how-it-works-language-codes",
                "\t\t},",
                "\t\t targetLanguage: \"${3:en}\"",
                "\t}",
			"})"
		]
	},
	"Amplify Predictions TextInImage": {
		"prefix": "Predictions.textInImage",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\ttext: {",
                "\t\tsource: {",
                "\t\t\t${1:file}",
                "\t\t}",
                "\t}",
			"})"
		]
	},
	"Amplify Predictions TextInS3Image": {
		"prefix": "Predictions.textInS3Image",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\ttext: {",
                "\t\tsource: {",
                "\t\t\tkey: ${1:pathToPhoto},",
                "\t\t\tlevel?: ${2:'public | private | protected'}, //optional, default is the configured on Storage category",
                "\t\t\t// identityId: ${3:\"\"} //this is optional for level protected",
                "\t\t}",
                "\t}",
			"})"
		]
	},
	"Amplify Predictions PlainText": {
		"prefix": "Predictions.plainText",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\ttext: {",
                "\t\tsource: {",
                "\t\t\t${1:file}",
                "\t\t},",
                "\t\tformat: ${2:\"PLAIN\"},",
                "\t}",
			"})",
			".then(response => {",
                "\tconst {",
                "\t\ttext: {",
                "\t\t\tfullText, // String",
                "\t\t\tlines, // Array of String ordered from top to bottom",
                "\t\t\tlinesDetailed: [",
                "\t\t\t\t{",
                "\t\t\t\t\t/* array of",
                "\t\t\t\t\ttext, // String",
                "\t\t\t\t\tboundingBox: {",
                "\t\t\t\t\t\twidth, // ratio of overall image width",
                "\t\t\t\t\t\theight, // ratio of overall image height",
                "\t\t\t\t\t\tleft, // left coordinate as a ratio of overall image width",
                "\t\t\t\t\t\ttop // top coordinate as a ratio of overall image height",
                "\t\t\t\t\t},",
                "\t\t\t\t\tpolygon // Array of { x, y } coordinates as a ratio of overall image width and height",
                "\t\t\t\t\t*/",
                "\t\t\t\t}",
                "\t\t\t],",
                "\t\t\twords // Array of objects that contains { text, boundingBox, polygon}",
                "\t\t}",
                "\t} = response",
			"})",
			".catch(err => console.log({ err }));"
		]
	},
	"Amplify Prediction StructuredForm": {
		"prefix": "Predictions.structuredForm",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\ttext: {",
                "\t\tsource: {",
                "\t\t\t${1:file}",
                "\t\t},",
                "\t\tformat: ${2:\"FORM\"},",
                "\t}",
			"})",
			".then(response => {",
                "\tconst {",
                "\t\ttext: {",
                "\t\t\t// same as PLAIN +",
                "\t\t\t${3:keyValues}  // Array of { key (String), value: { text (String), selected (boolean)}, polygon, boundingBox }",
                "\t\t}",
                "\t} = response",
			"})",
			".catch(err => console.log({ err }));"
		]
	},
	"Amplify Prediction StructuredTables": {
		"prefix": "Predictions.structuredTables",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\ttext: {",
                "\t\tsource: {",
                "\t\t\t${1:file}",
                "\t\t},",
                "\t\tformat: ${2:\"TABLE\"},",
                "\t}",
			"})",
			".then(response => {",
                "\tconst {",
                "\t\ttext: {",
                "\t\t\t// same as PLAIN +",
                "\t\t\ttables : [",
                "\t\t\t\t{",
                "\t\t\t\t\tsize: { rows, columns },",
                "\t\t\t\t\ttable // Matrix Array[ Array ] of size rows",
                "\t\t\t\t\t// each element of the array contains { text, boundingBox, polygon, selected, rowSpan, columnSpan}",
                "\t\t\t\t}",
                "\t\t\t]",
                "\t\t}",
                "\t} = response",
			"})",
			".catch(err => console.log({ err }));"
		]
	},
	"Amplify Prediction Detection": {
		"prefix": "Predictions.detectFile",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\tentities: {",
                "\t\tsource: {",
                "\t\t\t${1:file},",
                "\t\t},",
                "\t}",
			"})"
		]
	},
	"Amplify Prediction S3 Detection": {
		"prefix": "Predictions.detectFromS3",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\tentities: {",
                "\t\tsource: {",
                "\t\t\tkey: ${1:pathToPhoto},",
                "\t\t\tlevel: 'public | private | protected', // optional, default is the configured on Storage category",
                "\t\t},",
                "\t}",
			"})"
		]
	},
	"Amplify Prediction Faces Detection": {
		"prefix": "Predictions.detectFace",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\tentities: {",
                "\t\tsource: {",
                "\t\t\t${1:file},",
                "\t\t},",
                "\t}",
			"})",
			".then(({ entities }) => {",
                "\tentities.forEach(({boundingBox, landmarks}) => {",
                "\t\tconst {",
                "\t\t\t width, // ratio of overall image width",
                "\t\t\t height, // ratio of overall image height",
                "\t\t\t left, // left coordinate as a ratio of overall image width",
                "\t\t\t top // top coordinate as a ratio of overall image height",
                "\t\t} = boundingBox;",
                "\t\tlandmarks.forEach(landmark => {",
                "\t\t\tconst {",
                "\t\t\t\t${6:type}, // string \"eyeLeft\", \"eyeRight\", \"mouthLeft\", \"mouthRight\", \"nose\"",
                "\t\t\t\t${7:x}, // ratio of overall image width",
                "\t\t\t\t${8:y}, // ratio of overall image height",
                "\t\t\t} = landmark;",
                "\t\t})",
                "\t})",
			"})",
			".catch(err => console.log({ err }));"
		]
	},
	"Amplify Prediction Celebrities Detection": {
		"prefix": "Predictions.detectCelebrity",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\tentities: {",
                "\t\tsource: {",
                "\t\t\t${1:file},",
                "\t\t},",
                "\t\tcelebrityDetection: true // boolean. It will only show detected celebrities",
                "\t}",
			"})",
			".then(({ entities }) => {",
                "\tentities.forEach(({ boundingBox, landmarks, metadata }) => {",
                "\t\tconst {",
                "\t\t\t${1:name},",
                "\t\t\t${2:urls}",
                "\t\t} = metadata; // celebrity info",

                "\t\t// ...",
                "\t})",
			"})",
			".catch(err => console.log({ err }));"
		]
    },
    "Amplify Prediction Label identification": {
		"prefix": "Predictions.identify",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.identify({",
                "\tlabels: {",
                "\t\tsource: {",
                "\t\t\tfile,",
                "\t\t},",
                "\t\ttype: \"${1:LABELS}\"   // Other types are UNSAFE and ALL (To select both LABELS and UNSAFE)",
                "\t}",
            "})",
            ".then(response => {",
                "\tconst { labels } = response;",
                "\tlabels.forEach(object => {",
                "\t\tconst { name, boundingBoxes } = object",
                "\t});",
            "})",
            ".catch(err => console.log({ err }));"
		]
	},
	"Amplify Prediction Interpret": {
		"prefix": "Predictions.interpret",
		"scope": "javascript,javascriptreact,typescript",
		"body": [
			"Predictions.interpret({",
                "\ttext: {",
                "\t\tsource: {",
                "\t\t\ttext: ${1:textToInterpret},",
                "\t\t},",
                "\t\ttype: ${2:\"ALL\"}",
                "\t}",
			"})"
		]
	}
}
