// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

/**
 * Generated by scripts/dts-bundler/README.md
 * Manual change contained:
 * * {@link PutObjectRequest.Body}: Remove Node.js specific `Readable` type
 */
import { MetadataBearer as __MetadataBearer } from '@aws-sdk/types';

declare const ChecksumAlgorithm: {
	readonly CRC32: 'CRC32';
	readonly CRC32C: 'CRC32C';
	readonly SHA1: 'SHA1';
	readonly SHA256: 'SHA256';
};
declare const EncodingType: {
	readonly url: 'url';
};
declare const ObjectCannedACL: {
	readonly authenticated_read: 'authenticated-read';
	readonly aws_exec_read: 'aws-exec-read';
	readonly bucket_owner_full_control: 'bucket-owner-full-control';
	readonly bucket_owner_read: 'bucket-owner-read';
	readonly private: 'private';
	readonly public_read: 'public-read';
	readonly public_read_write: 'public-read-write';
};
declare const ObjectLockLegalHoldStatus: {
	readonly OFF: 'OFF';
	readonly ON: 'ON';
};
declare const ObjectLockMode: {
	readonly COMPLIANCE: 'COMPLIANCE';
	readonly GOVERNANCE: 'GOVERNANCE';
};
declare const ObjectStorageClass: {
	readonly DEEP_ARCHIVE: 'DEEP_ARCHIVE';
	readonly GLACIER: 'GLACIER';
	readonly GLACIER_IR: 'GLACIER_IR';
	readonly INTELLIGENT_TIERING: 'INTELLIGENT_TIERING';
	readonly ONEZONE_IA: 'ONEZONE_IA';
	readonly OUTPOSTS: 'OUTPOSTS';
	readonly REDUCED_REDUNDANCY: 'REDUCED_REDUNDANCY';
	readonly SNOW: 'SNOW';
	readonly STANDARD: 'STANDARD';
	readonly STANDARD_IA: 'STANDARD_IA';
};
declare const RequestCharged: {
	readonly requester: 'requester';
};
declare const RequestPayer: {
	readonly requester: 'requester';
};
declare const ServerSideEncryption: {
	readonly AES256: 'AES256';
	readonly aws_kms: 'aws:kms';
};
declare const StorageClass: {
	readonly DEEP_ARCHIVE: 'DEEP_ARCHIVE';
	readonly GLACIER: 'GLACIER';
	readonly GLACIER_IR: 'GLACIER_IR';
	readonly INTELLIGENT_TIERING: 'INTELLIGENT_TIERING';
	readonly ONEZONE_IA: 'ONEZONE_IA';
	readonly OUTPOSTS: 'OUTPOSTS';
	readonly REDUCED_REDUNDANCY: 'REDUCED_REDUNDANCY';
	readonly SNOW: 'SNOW';
	readonly STANDARD: 'STANDARD';
	readonly STANDARD_IA: 'STANDARD_IA';
};
/**
 * @public
 * <p>Container for all (if there are any) keys between Prefix and the next occurrence of the
 *          string specified by a delimiter. CommonPrefixes lists keys that act like subdirectories in
 *          the directory specified by Prefix. For example, if the prefix is notes/ and the delimiter
 *          is a slash (/) as in notes/summer/july, the common prefix is notes/summer/. </p>
 */
export interface CommonPrefix {
	/**
	 * <p>Container for the specified common prefix.</p>
	 */
	Prefix?: string;
}
/**
 * @public
 *
 * The input for {@link ListObjectsV2Command}.
 */
export interface ListObjectsV2CommandInput extends ListObjectsV2Request {}
/**
 * @public
 *
 * The output of {@link ListObjectsV2Command}.
 */
export interface ListObjectsV2CommandOutput
	extends ListObjectsV2Output,
		__MetadataBearer {}
/**
 * @public
 */
export interface ListObjectsV2Output {
	/**
	 * <p>Set to false if all of the results were returned. Set to true if more keys are available
	 *          to return. If the number of results exceeds that specified by MaxKeys, all of the results
	 *          might not be returned.</p>
	 */
	IsTruncated?: boolean;
	/**
	 * <p>Metadata about each object returned.</p>
	 */
	Contents?: _Object[];
	/**
	 * <p>The bucket name.</p>
	 *          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
	 *          <p>When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code>
	 *                <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What is S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
	 */
	Name?: string;
	/**
	 * <p> Keys that begin with the indicated prefix.</p>
	 */
	Prefix?: string;
	/**
	 * <p>Causes keys that contain the same string between the prefix and the first occurrence of
	 *          the delimiter to be rolled up into a single result element in the CommonPrefixes
	 *          collection. These rolled-up keys are not returned elsewhere in the response. Each rolled-up
	 *          result counts as only one return against the <code>MaxKeys</code> value.</p>
	 */
	Delimiter?: string;
	/**
	 * <p>Sets the maximum number of keys returned in the response. By default the action returns
	 *          up to 1,000 key names. The response might contain fewer keys but will never contain
	 *          more.</p>
	 */
	MaxKeys?: number;
	/**
	 * <p>All of the keys (up to 1,000) rolled up into a common prefix count as a single return
	 *          when calculating the number of returns.</p>
	 *          <p>A response can contain <code>CommonPrefixes</code> only if you specify a
	 *          delimiter.</p>
	 *          <p>
	 *             <code>CommonPrefixes</code> contains all (if there are any) keys between
	 *             <code>Prefix</code> and the next occurrence of the string specified by a
	 *          delimiter.</p>
	 *          <p>
	 *             <code>CommonPrefixes</code> lists keys that act like subdirectories in the directory
	 *          specified by <code>Prefix</code>.</p>
	 *          <p>For example, if the prefix is <code>notes/</code> and the delimiter is a slash
	 *             (<code>/</code>) as in <code>notes/summer/july</code>, the common prefix is
	 *             <code>notes/summer/</code>. All of the keys that roll up into a common prefix count as a
	 *          single return when calculating the number of returns. </p>
	 */
	CommonPrefixes?: CommonPrefix[];
	/**
	 * <p>Encoding type used by Amazon S3 to encode object key names in the XML response.</p>
	 *          <p>If you specify the encoding-type request parameter, Amazon S3 includes this element in the
	 *          response, and returns encoded key name values in the following response elements:</p>
	 *          <p>
	 *             <code>Delimiter, Prefix, Key,</code> and <code>StartAfter</code>.</p>
	 */
	EncodingType?: EncodingType | string;
	/**
	 * <p>KeyCount is the number of keys returned with this request. KeyCount will always be less
	 *          than or equal to the <code>MaxKeys</code> field. Say you ask for 50 keys, your result will
	 *          include 50 keys or fewer.</p>
	 */
	KeyCount?: number;
	/**
	 * <p> If ContinuationToken was sent with the request, it is included in the response.</p>
	 */
	ContinuationToken?: string;
	/**
	 * <p>
	 *             <code>NextContinuationToken</code> is sent when <code>isTruncated</code> is true, which
	 *          means there are more keys in the bucket that can be listed. The next list requests to Amazon S3
	 *          can be continued with this <code>NextContinuationToken</code>.
	 *             <code>NextContinuationToken</code> is obfuscated and is not a real key</p>
	 */
	NextContinuationToken?: string;
	/**
	 * <p>If StartAfter was sent with the request, it is included in the response.</p>
	 */
	StartAfter?: string;
}
/**
 * @public
 */
export interface ListObjectsV2Request {
	/**
	 * <p>Bucket name to list. </p>
	 *          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
	 *          <p>When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code>
	 *                <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What is S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
	 * <p>Note: To supply the Multi-region Access Point (MRAP) to Bucket, you need to install the "@aws-sdk/signature-v4-crt" package to your project dependencies.
	 * For more information, please go to https://github.com/aws/aws-sdk-js-v3#known-issues</p>
	 */
	Bucket: string | undefined;
	/**
	 * <p>A delimiter is a character you use to group keys.</p>
	 */
	Delimiter?: string;
	/**
	 * <p>Encoding type used by Amazon S3 to encode object keys in the response.</p>
	 */
	EncodingType?: EncodingType | string;
	/**
	 * <p>Sets the maximum number of keys returned in the response. By default the action returns
	 *          up to 1,000 key names. The response might contain fewer keys but will never contain
	 *          more.</p>
	 */
	MaxKeys?: number;
	/**
	 * <p>Limits the response to keys that begin with the specified prefix.</p>
	 */
	Prefix?: string;
	/**
	 * <p>ContinuationToken indicates Amazon S3 that the list is being continued on this bucket with a
	 *          token. ContinuationToken is obfuscated and is not a real key.</p>
	 */
	ContinuationToken?: string;
	/**
	 * <p>The owner field is not present in listV2 by default, if you want to return owner field
	 *          with each key in the result then set the fetch owner field to true.</p>
	 */
	FetchOwner?: boolean;
	/**
	 * <p>StartAfter is where you want Amazon S3 to start listing from. Amazon S3 starts listing after this
	 *          specified key. StartAfter can be any key in the bucket.</p>
	 */
	StartAfter?: string;
	/**
	 * <p>Confirms that the requester knows that she or he will be charged for the list objects
	 *          request in V2 style. Bucket owners need not specify this parameter in their
	 *          requests.</p>
	 */
	RequestPayer?: RequestPayer | string;
	/**
	 * <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
	 */
	ExpectedBucketOwner?: string;
}
/**
 * @public
 * <p>Container for the owner's display name and ID.</p>
 */
export interface Owner {
	/**
	 * <p>Container for the display name of the owner. This value is only supported in the
	 *          following Amazon Web Services Regions:</p>
	 *          <ul>
	 *             <li>
	 *                <p>US East (N. Virginia)</p>
	 *             </li>
	 *             <li>
	 *                <p>US West (N. California)</p>
	 *             </li>
	 *             <li>
	 *                <p>US West (Oregon)</p>
	 *             </li>
	 *             <li>
	 *                <p>Asia Pacific (Singapore)</p>
	 *             </li>
	 *             <li>
	 *                <p>Asia Pacific (Sydney)</p>
	 *             </li>
	 *             <li>
	 *                <p>Asia Pacific (Tokyo)</p>
	 *             </li>
	 *             <li>
	 *                <p>Europe (Ireland)</p>
	 *             </li>
	 *             <li>
	 *                <p>South America (São Paulo)</p>
	 *             </li>
	 *          </ul>
	 */
	DisplayName?: string;
	/**
	 * <p>Container for the ID of the owner.</p>
	 */
	ID?: string;
}
/**
 * This interface extends from `PutObjectRequest` interface. There are more parameters than `Body` defined in {@link PutObjectRequest}
 */
export interface PutObjectCommandInput extends PutObjectCommandInputType {}
/**
 * @public
 *
 * The output of {@link PutObjectCommand}.
 */
export interface PutObjectCommandOutput
	extends PutObjectOutput,
		__MetadataBearer {}
/**
 * @public
 */
export interface PutObjectOutput {
	/**
	 * <p>If the expiration is configured for the object (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycleConfiguration.html">PutBucketLifecycleConfiguration</a>), the response includes this header. It
	 *          includes the <code>expiry-date</code> and <code>rule-id</code> key-value pairs that provide
	 *          information about object expiration. The value of the <code>rule-id</code> is
	 *          URL-encoded.</p>
	 */
	Expiration?: string;
	/**
	 * <p>Entity tag for the uploaded object.</p>
	 */
	ETag?: string;
	/**
	 * <p>The base64-encoded, 32-bit CRC32 checksum of the object. This will only be present if it was uploaded
	 *     with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated
	 *     with multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
	 *     Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumCRC32?: string;
	/**
	 * <p>The base64-encoded, 32-bit CRC32C checksum of the object. This will only be present if it was uploaded
	 *     with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated
	 *     with multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
	 *     Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumCRC32C?: string;
	/**
	 * <p>The base64-encoded, 160-bit SHA-1 digest of the object. This will only be present if it was uploaded
	 *     with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated
	 *     with multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
	 *     Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumSHA1?: string;
	/**
	 * <p>The base64-encoded, 256-bit SHA-256 digest of the object. This will only be present if it was uploaded
	 *     with the object. With multipart uploads, this may not be a checksum value of the object. For more information about how checksums are calculated
	 *     with multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html#large-object-checksums">
	 *     Checking object integrity</a> in the <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumSHA256?: string;
	/**
	 * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
	 *          AES256, <code>aws:kms</code>).</p>
	 */
	ServerSideEncryption?: ServerSideEncryption | string;
	/**
	 * <p>Version of the object.</p>
	 */
	VersionId?: string;
	/**
	 * <p>If server-side encryption with a customer-provided encryption key was requested, the
	 *          response will include this header confirming the encryption algorithm used.</p>
	 */
	SSECustomerAlgorithm?: string;
	/**
	 * <p>If server-side encryption with a customer-provided encryption key was requested, the
	 *          response will include this header to provide round-trip message integrity verification of
	 *          the customer-provided encryption key.</p>
	 */
	SSECustomerKeyMD5?: string;
	/**
	 * <p>If <code>x-amz-server-side-encryption</code> is has a valid value of
	 *             <code>aws:kms</code>, this header specifies the ID of the Amazon Web Services Key Management Service
	 *          (Amazon Web Services KMS) symmetric encryption customer managed key that was used for the object. </p>
	 */
	SSEKMSKeyId?: string;
	/**
	 * <p>If present, specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The
	 *          value of this header is a base64-encoded UTF-8 string holding JSON with the encryption
	 *          context key-value pairs. This value is stored as object metadata and automatically gets passed
	 *          on to Amazon Web Services KMS for future <code>GetObject</code> or <code>CopyObject</code> operations on
	 *          this object.</p>
	 */
	SSEKMSEncryptionContext?: string;
	/**
	 * <p>Indicates whether the uploaded object uses an S3 Bucket Key for server-side encryption
	 *          with Amazon Web Services KMS (SSE-KMS).</p>
	 */
	BucketKeyEnabled?: boolean;
	/**
	 * <p>If present, indicates that the requester was successfully charged for the
	 *          request.</p>
	 */
	RequestCharged?: RequestCharged | string;
}
/**
 * @public
 */
export interface PutObjectRequest {
	/**
	 * <p>The canned ACL to apply to the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
	 *             ACL</a>.</p>
	 *          <p>This action is not supported by Amazon S3 on Outposts.</p>
	 */
	ACL?: ObjectCannedACL | string;
	/**
	 * <p>Object data.</p>
	 */
	Body?: ReadableStream | Blob;
	/**
	 * <p>The bucket name to which the PUT action was initiated. </p>
	 *          <p>When using this action with an access point, you must direct requests to the access point hostname. The access point hostname takes the form <i>AccessPointName</i>-<i>AccountId</i>.s3-accesspoint.<i>Region</i>.amazonaws.com. When using this action with an access point through the Amazon Web Services SDKs, you provide the access point ARN in place of the bucket name. For more information about access point ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-access-points.html">Using access points</a> in the <i>Amazon S3 User Guide</i>.</p>
	 *          <p>When you use this action with Amazon S3 on Outposts, you must direct requests to the S3 on Outposts hostname. The S3 on Outposts hostname takes the form <code>
	 *                <i>AccessPointName</i>-<i>AccountId</i>.<i>outpostID</i>.s3-outposts.<i>Region</i>.amazonaws.com</code>. When you use this action with S3 on Outposts through the Amazon Web Services SDKs, you provide the Outposts access point ARN in place of the bucket name. For more information about S3 on Outposts ARNs, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/S3onOutposts.html">What is S3 on Outposts</a> in the <i>Amazon S3 User Guide</i>.</p>
	 * <p>Note: To supply the Multi-region Access Point (MRAP) to Bucket, you need to install the "@aws-sdk/signature-v4-crt" package to your project dependencies.
	 * For more information, please go to https://github.com/aws/aws-sdk-js-v3#known-issues</p>
	 */
	Bucket: string | undefined;
	/**
	 * <p> Can be used to specify caching behavior along the request/reply chain. For more
	 *          information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a>.</p>
	 */
	CacheControl?: string;
	/**
	 * <p>Specifies presentational information for the object. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc6266#section-4">https://www.rfc-editor.org/rfc/rfc6266#section-4</a>.</p>
	 */
	ContentDisposition?: string;
	/**
	 * <p>Specifies what content encodings have been applied to the object and thus what decoding
	 *          mechanisms must be applied to obtain the media-type referenced by the Content-Type header
	 *          field. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding">https://www.rfc-editor.org/rfc/rfc9110.html#field.content-encoding</a>.</p>
	 */
	ContentEncoding?: string;
	/**
	 * <p>The language the content is in.</p>
	 */
	ContentLanguage?: string;
	/**
	 * <p>Size of the body in bytes. This parameter is useful when the size of the body cannot be
	 *          determined automatically. For more information, see <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length">https://www.rfc-editor.org/rfc/rfc9110.html#name-content-length</a>.</p>
	 */
	ContentLength?: number;
	/**
	 * <p>The base64-encoded 128-bit MD5 digest of the message (without the headers) according to
	 *          RFC 1864. This header can be used as a message integrity check to verify that the data is
	 *          the same data that was originally sent. Although it is optional, we recommend using the
	 *          Content-MD5 mechanism as an end-to-end integrity check. For more information about REST
	 *          request authentication, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST Authentication</a>.</p>
	 */
	ContentMD5?: string;
	/**
	 * <p>A standard MIME type describing the format of the contents. For more information, see
	 *             <a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type">https://www.rfc-editor.org/rfc/rfc9110.html#name-content-type</a>.</p>
	 */
	ContentType?: string;
	/**
	 * <p>Indicates the algorithm used to create the checksum for the object when using the SDK. This header will not provide any
	 *     additional functionality if not using the SDK. When sending this header, there must be a corresponding <code>x-amz-checksum</code> or
	 *     <code>x-amz-trailer</code> header sent. Otherwise, Amazon S3 fails the request with the HTTP status code <code>400 Bad Request</code>. For more
	 *     information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking object integrity</a> in
	 *     the <i>Amazon S3 User Guide</i>.</p>
	 *          <p>If you provide an individual checksum, Amazon S3 ignores any provided
	 *             <code>ChecksumAlgorithm</code> parameter.</p>
	 */
	ChecksumAlgorithm?: ChecksumAlgorithm | string;
	/**
	 * <p>This header can be used as a data integrity check to verify that the data received is the same data that was originally sent.
	 *     This header specifies the base64-encoded, 32-bit CRC32 checksum of the object. For more information, see
	 *     <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking object integrity</a> in the
	 *     <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumCRC32?: string;
	/**
	 * <p>This header can be used as a data integrity check to verify that the data received is the same data that was originally sent.
	 *     This header specifies the base64-encoded, 32-bit CRC32C checksum of the object. For more information, see
	 *     <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking object integrity</a> in the
	 *     <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumCRC32C?: string;
	/**
	 * <p>This header can be used as a data integrity check to verify that the data received is the same data that was originally sent.
	 *     This header specifies the base64-encoded, 160-bit SHA-1 digest of the object. For more information, see
	 *     <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking object integrity</a> in the
	 *     <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumSHA1?: string;
	/**
	 * <p>This header can be used as a data integrity check to verify that the data received is the same data that was originally sent.
	 *     This header specifies the base64-encoded, 256-bit SHA-256 digest of the object. For more information, see
	 *     <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/checking-object-integrity.html">Checking object integrity</a> in the
	 *     <i>Amazon S3 User Guide</i>.</p>
	 */
	ChecksumSHA256?: string;
	/**
	 * <p>The date and time at which the object is no longer cacheable. For more information, see
	 *             <a href="https://www.rfc-editor.org/rfc/rfc7234#section-5.3">https://www.rfc-editor.org/rfc/rfc7234#section-5.3</a>.</p>
	 */
	Expires?: Date;
	/**
	 * <p>Gives the grantee READ, READ_ACP, and WRITE_ACP permissions on the object.</p>
	 *          <p>This action is not supported by Amazon S3 on Outposts.</p>
	 */
	GrantFullControl?: string;
	/**
	 * <p>Allows grantee to read the object data and its metadata.</p>
	 *          <p>This action is not supported by Amazon S3 on Outposts.</p>
	 */
	GrantRead?: string;
	/**
	 * <p>Allows grantee to read the object ACL.</p>
	 *          <p>This action is not supported by Amazon S3 on Outposts.</p>
	 */
	GrantReadACP?: string;
	/**
	 * <p>Allows grantee to write the ACL for the applicable object.</p>
	 *          <p>This action is not supported by Amazon S3 on Outposts.</p>
	 */
	GrantWriteACP?: string;
	/**
	 * <p>Object key for which the PUT action was initiated.</p>
	 */
	Key: string | undefined;
	/**
	 * <p>A map of metadata to store with the object in S3.</p>
	 */
	Metadata?: Record<string, string>;
	/**
	 * <p>The server-side encryption algorithm used when storing this object in Amazon S3 (for example,
	 *          AES256, <code>aws:kms</code>).</p>
	 */
	ServerSideEncryption?: ServerSideEncryption | string;
	/**
	 * <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
	 *          STANDARD storage class provides high durability and high availability. Depending on
	 *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
	 *          the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes</a> in the
	 *             <i>Amazon S3 User Guide</i>.</p>
	 */
	StorageClass?: StorageClass | string;
	/**
	 * <p>If the bucket is configured as a website, redirects requests for this object to another
	 *          object in the same bucket or to an external URL. Amazon S3 stores the value of this header in
	 *          the object metadata. For information about object metadata, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html">Object Key and Metadata</a>.</p>
	 *          <p>In the following example, the request header sets the redirect to an object
	 *          (anotherPage.html) in the same bucket:</p>
	 *          <p>
	 *             <code>x-amz-website-redirect-location: /anotherPage.html</code>
	 *          </p>
	 *          <p>In the following example, the request header sets the object redirect to another
	 *          website:</p>
	 *          <p>
	 *             <code>x-amz-website-redirect-location: http://www.example.com/</code>
	 *          </p>
	 *          <p>For more information about website hosting in Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">Hosting Websites on Amazon S3</a> and
	 *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/how-to-page-redirect.html">How to
	 *             Configure Website Page Redirects</a>. </p>
	 */
	WebsiteRedirectLocation?: string;
	/**
	 * <p>Specifies the algorithm to use to when encrypting the object (for example,
	 *          AES256).</p>
	 */
	SSECustomerAlgorithm?: string;
	/**
	 * <p>Specifies the customer-provided encryption key for Amazon S3 to use in encrypting data. This
	 *          value is used to store the object and then it is discarded; Amazon S3 does not store the
	 *          encryption key. The key must be appropriate for use with the algorithm specified in the
	 *             <code>x-amz-server-side-encryption-customer-algorithm</code> header.</p>
	 */
	SSECustomerKey?: string;
	/**
	 * <p>Specifies the 128-bit MD5 digest of the encryption key according to RFC 1321. Amazon S3 uses
	 *          this header for a message integrity check to ensure that the encryption key was transmitted
	 *          without error.</p>
	 */
	SSECustomerKeyMD5?: string;
	/**
	 * <p>If <code>x-amz-server-side-encryption</code> has a valid value of <code>aws:kms</code>,
	 *          this header specifies the ID of the Amazon Web Services Key Management Service (Amazon Web Services KMS) symmetric
	 *          encryption customer managed key that was used for the object. If you specify
	 *             <code>x-amz-server-side-encryption:aws:kms</code>, but do not provide<code>
	 *             x-amz-server-side-encryption-aws-kms-key-id</code>, Amazon S3 uses the Amazon Web Services managed key to
	 *          protect the data. If the KMS key does not exist in the same account issuing the command,
	 *          you must use the full ARN and not just the ID. </p>
	 */
	SSEKMSKeyId?: string;
	/**
	 * <p>Specifies the Amazon Web Services KMS Encryption Context to use for object encryption. The value of
	 *          this header is a base64-encoded UTF-8 string holding JSON with the encryption context
	 *          key-value pairs. This value is stored as object metadata and automatically gets passed on to
	 *          Amazon Web Services KMS for future <code>GetObject</code> or <code>CopyObject</code> operations on this
	 *          object.</p>
	 */
	SSEKMSEncryptionContext?: string;
	/**
	 * <p>Specifies whether Amazon S3 should use an S3 Bucket Key for object encryption with
	 *          server-side encryption using AWS KMS (SSE-KMS). Setting this header to <code>true</code>
	 *          causes Amazon S3 to use an S3 Bucket Key for object encryption with SSE-KMS.</p>
	 *          <p>Specifying this header with a PUT action doesn’t affect bucket-level settings for S3
	 *          Bucket Key.</p>
	 */
	BucketKeyEnabled?: boolean;
	/**
	 * <p>Confirms that the requester knows that they will be charged for the request. Bucket
	 *          owners need not specify this parameter in their requests. For information about downloading
	 *          objects from Requester Pays buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ObjectsinRequesterPaysBuckets.html">Downloading Objects in
	 *             Requester Pays Buckets</a> in the <i>Amazon S3 User Guide</i>.</p>
	 */
	RequestPayer?: RequestPayer | string;
	/**
	 * <p>The tag-set for the object. The tag-set must be encoded as URL Query parameters. (For
	 *          example, "Key1=Value1")</p>
	 */
	Tagging?: string;
	/**
	 * <p>The Object Lock mode that you want to apply to this object.</p>
	 */
	ObjectLockMode?: ObjectLockMode | string;
	/**
	 * <p>The date and time when you want this object's Object Lock to expire. Must be formatted
	 *          as a timestamp parameter.</p>
	 */
	ObjectLockRetainUntilDate?: Date;
	/**
	 * <p>Specifies whether a legal hold will be applied to this object. For more information
	 *          about S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock.html">Object Lock</a>.</p>
	 */
	ObjectLockLegalHoldStatus?: ObjectLockLegalHoldStatus | string;
	/**
	 * <p>The account ID of the expected bucket owner. If the bucket is owned by a different account, the request fails with the HTTP status code <code>403 Forbidden</code> (access denied).</p>
	 */
	ExpectedBucketOwner?: string;
}
/**
 * @public
 * <p>An object consists of data and its descriptive metadata.</p>
 */
export interface _Object {
	/**
	 * <p>The name that you assign to an object. You use the object key to retrieve the
	 *          object.</p>
	 */
	Key?: string;
	/**
	 * <p>Creation date of the object.</p>
	 */
	LastModified?: Date;
	/**
	 * <p>The entity tag is a hash of the object. The ETag reflects changes only to the contents
	 *          of an object, not its metadata. The ETag may or may not be an MD5 digest of the object
	 *          data. Whether or not it is depends on how the object was created and how it is encrypted as
	 *          described below:</p>
	 *          <ul>
	 *             <li>
	 *                <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the
	 *                Amazon Web Services Management Console, and are encrypted by SSE-S3 or plaintext, have ETags that
	 *                are an MD5 digest of their object data.</p>
	 *             </li>
	 *             <li>
	 *                <p>Objects created by the PUT Object, POST Object, or Copy operation, or through the
	 *                Amazon Web Services Management Console, and are encrypted by SSE-C or SSE-KMS, have ETags that are
	 *                not an MD5 digest of their object data.</p>
	 *             </li>
	 *             <li>
	 *                <p>If an object is created by either the Multipart Upload or Part Copy operation, the
	 *                ETag is not an MD5 digest, regardless of the method of encryption. If an object is
	 *                larger than 16 MB, the Amazon Web Services Management Console will upload or copy that object as a
	 *                Multipart Upload, and therefore the ETag will not be an MD5 digest.</p>
	 *             </li>
	 *          </ul>
	 */
	ETag?: string;
	/**
	 * <p>The algorithm that was used to create a checksum of the object.</p>
	 */
	ChecksumAlgorithm?: (ChecksumAlgorithm | string)[];
	/**
	 * <p>Size in bytes of the object</p>
	 */
	Size?: number;
	/**
	 * <p>The class of storage used to store the object.</p>
	 */
	StorageClass?: ObjectStorageClass | string;
	/**
	 * <p>The owner of the object</p>
	 */
	Owner?: Owner;
}
/**
 * @public
 */
export type ChecksumAlgorithm =
	(typeof ChecksumAlgorithm)[keyof typeof ChecksumAlgorithm];
/**
 * @public
 */
export type EncodingType = (typeof EncodingType)[keyof typeof EncodingType];
/**
 * @public
 */
export type ObjectCannedACL =
	(typeof ObjectCannedACL)[keyof typeof ObjectCannedACL];
/**
 * @public
 */
export type ObjectLockLegalHoldStatus =
	(typeof ObjectLockLegalHoldStatus)[keyof typeof ObjectLockLegalHoldStatus];
/**
 * @public
 */
export type ObjectLockMode =
	(typeof ObjectLockMode)[keyof typeof ObjectLockMode];
/**
 * @public
 */
export type ObjectStorageClass =
	(typeof ObjectStorageClass)[keyof typeof ObjectStorageClass];
/**
 * @public
 *
 * The input for {@link PutObjectCommand}.
 */
export type PutObjectCommandInputType = Omit<PutObjectRequest, 'Body'> & {
	/**
	 * For *`PutObjectRequest["Body"]`*, see {@link PutObjectRequest.Body}.
	 */
	Body?: PutObjectRequest['Body'] | string | Uint8Array | Buffer;
};
/**
 * @public
 */
export type RequestCharged =
	(typeof RequestCharged)[keyof typeof RequestCharged];
/**
 * @public
 */
export type RequestPayer = (typeof RequestPayer)[keyof typeof RequestPayer];
/**
 * @public
 */
export type ServerSideEncryption =
	(typeof ServerSideEncryption)[keyof typeof ServerSideEncryption];
/**
 * @public
 */
export type StorageClass = (typeof StorageClass)[keyof typeof StorageClass];

export {};
