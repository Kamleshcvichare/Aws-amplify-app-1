{
	"Amplify Auth Configuration": {
		"prefix": "Amplify.configure",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"import awsmobile from './aws-exports';",
			"Amplify.configure({",
			"\tAuth: {",
			"\t\t// REQUIRED - Amazon Cognito Identity Pool ID,",
			"\t\tidentityPoolId: $awsmobile.aws_cognito_identity_pool_id,",
			"\t\t// REQUIRED - Amazon Cognito Region",
			"\t\tregion: $awsmobile.aws_cognito_region,",
			"\t\t// OPTIONAL - Amazon Cognito User Pool ID",
			"\t\tuserPoolId: $awsmobile.aws_user_pools_id,",
			"\t\t// OPTIONAL - Amazon Cognito Web Client ID (26-char alphanumeric string)",
			"\t\tuserPoolWebClientId: $awsmobile.aws_user_pools_web_client_id,",
			"\t\t// OPTIONAL - Enforce user authentication prior to accessing AWS resources or not",
			"\t\tmandatorySignIn: ${1:awsmobileMandatorySignIn},",
			"\t\t// OPTIONAL - Configuration for cookie storage",
			"\t\tcookieStorage: {",
			"\t\t\t// REQUIRED - Cookie domain (only required if cookieStorage is provided)",
			"\t\t\tdomain: ${2:'.yourdomain.com'},",
			"\t\t\t// OPTIONAL - Cookie path",
			"\t\t\tpath: ${3:'/'},",
			"\t\t\t// OPTIONAL - Cookie expiration in days",
			"\t\t\texpires: ${4:365},",
			"\t\t\t// OPTIONAL - Cookie secure flag",
			"\t\t\tsecure: ${5:true}",
			"\t\t}",
			"\t}",
			"});"
		]
	},
	"Amplify Configure Auth": {
		"prefix": "Auth.configure",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"import Amplify, { Auth } from 'aws-amplify';",
			"import awsconfig from './aws-exports';",
			"Amplify.configure(awsconfig);"
		]
	},
	"Auth.signIn": {
		"prefix": "Auth.signIn",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.signIn(${1:username}, ${2:password})",
			"\t.then(user => console.log(user))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth.confirmSignIn": {
		"prefix": "Auth.confirmSignIn",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"// If MFA enabled, sign-in should be confirmed with the confirmation code",
			"// `user` : Return object from Auth.signIn()",
			"// `code` : Confirmation code  ",
			"// `mfaType` : MFA Type e.g. SMS, TOTP.",
			"Auth.confirmSignIn(${1:user}, ${2:code}, ${3:mfaType})",
			"\t.then(data => console.log(data))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth.signUp": {
		"prefix": "Auth.signUp",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.signUp({",
			"\t${1:username},",
			"\t${2:password},",
			"\tattributes: {",
			"\t\t${3:email},             // optional",
			"\t\t${4:phone_number},      // optional - E.164 number convention",
			"\t\t// Other custom attributes...",
			"\t},",
			"\tvalidationData: ${5:[]},  // optional",
			"\t})",
			"\t.then(data => console.log(data))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth.confirmSignUp": {
		"prefix": "Auth.confirmSignUp",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"// After retrieveing the confirmation code from the user",
			"Auth.confirmSignUp(${1:username}, ${2:code}, {",
			"\t// Optional. Force user confirmation irrespective of existing alias. By default set to True.",
			"\tforceAliasCreation: ${3:true}",
			"}).then(data => console.log(data))",
			"  .catch(err => console.log(err));"
		]
	},
	"Auth.signOut": {
		"prefix": "Auth.signOut",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.signOut()",
			"\t.then(data => console.log(data))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth Change Password": {
		"prefix": "Auth.changePassword",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.currentAuthenticatedUser()",
			"\t.then(user => {",
			"\t\treturn Auth.changePassword(user, ${1:'oldPassword'}, ${2:'newPassword'});",
			"\t})",
			"\t.then(data => console.log(data))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth Forgot Password": {
		"prefix": "Auth.forgotPassword",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.forgotPassword(${1:username})",
			"\t.then(data => console.log(data))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth Forgot Password Submit": {
		"prefix": "Auth.forgotPasswordSubmit",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"// Collect confirmation code and new password , then",
			"Auth.forgotPasswordSubmit(${1:username}, ${2:code}, ${3:new_password})",
			"\t.then(data => console.log(data))",
			"\t.catch(err => console.log(err));"
		]
	},
	"Auth oauth": {
		"prefix": "oauth.configure",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"oauth = {",
			"\t// Domain name",
			"\tdomain : ${1:'your-domain-prefix.auth.us-east-1.amazoncognito.com'},",
			"\t// Authorized scopes",
			"\tscope: ${2:['phone', 'email', 'profile', 'openid','aws.cognito.signin.user.admin']},",
			"\t// Callback URL",
			"\tredirectSignIn : ${3:'http://www.example.com/signin'},",
			"\t// Sign out URL",
			"\tredirectSignOut : ${4:'http://www.example.com/signout'},",
			"\t// 'code' for Authorization code grant,",
			"\t// 'token' for Implicit grant",
			"\tresponseType: ${5:'code'},",
			"\t// optional, for Cognito hosted ui specified options",
			"\toptions: {",
			"\t\t// Indicates if the data collection is enabled to support Cognito advanced security features. By default, this flag is set to true.",
			"\t\tAdvancedSecurityDataCollectionFlag : ${6:true}",
			"\t}",
			"}"
		]
	},
	"Auth.verifyTotpToken": {
		"prefix": "Auth.verifyTotpToken",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"// Then you will have your TOTP account in your TOTP-generating app (like Google Authenticator)",
			"// Use the generated one-time password to verify the setup",
			"Auth.verifyTotpToken(${1:user}, ${2:challengeAnswer}).then(() => {\n",
			"\t// don't forget to set TOTP as the preferred MFA method",
			"\tAuth.setPreferredMFA(${1:user}, 'TOTP');",
			"\t// ...",
			"}).catch( e => {",
			"\t// Token is not verified",
			"});"
		]
	},
	"Auth.currentCredentials": {
		"prefix": "Auth.currentCredentials",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.currentCredentials()",
			"\t.then(credentials => {",
			"\t\t${1: console.log(credentials); }",
			"\t})",
			".catch(err => ${2:console.log(err)});"
		]
	},
	"Amplify Auth Current Session": {
		"prefix": "Auth.currentSession",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Auth.currentSession()",
			".then(data => ${1:console.log(data)})",
			".catch(err => ${2:console.log(err)});"
		]
	}
}
