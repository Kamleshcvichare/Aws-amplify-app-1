{"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar DoubleLinkedNode = /** @class */ (function () {\r\n    function DoubleLinkedNode(keyVal) {\r\n        this.key = keyVal ? keyVal : '';\r\n        this.prevNode = null;\r\n        this.nextNode = null;\r\n    }\r\n    return DoubleLinkedNode;\r\n}());\r\n/**\r\n * double linked list plus a hash table inside\r\n * each key in the cache stored as a node in the list\r\n * recently visited node will be rotated to the head\r\n * so the Last Recently Visited node will be at the tail\r\n *\r\n * @member head - dummy head of the linked list\r\n * @member tail - dummy tail of the linked list\r\n * @member hashtable - the hashtable which maps cache key to list node\r\n * @member length - length of the list\r\n */\r\nvar CacheList = /** @class */ (function () {\r\n    /**\r\n     * initialization\r\n     */\r\n    function CacheList() {\r\n        this.head = new DoubleLinkedNode();\r\n        this.tail = new DoubleLinkedNode();\r\n        this.hashtable = {};\r\n        this.length = 0;\r\n        this.head.nextNode = this.tail;\r\n        this.tail.prevNode = this.head;\r\n    }\r\n    /**\r\n     * insert node to the head of the list\r\n     *\r\n     * @param node\r\n     */\r\n    CacheList.prototype.insertNodeToHead = function (node) {\r\n        var tmp = this.head.nextNode;\r\n        this.head.nextNode = node;\r\n        node.nextNode = tmp;\r\n        node.prevNode = this.head;\r\n        tmp.prevNode = node;\r\n        this.length = this.length + 1;\r\n    };\r\n    /**\r\n     * remove node\r\n     *\r\n     * @param node\r\n     */\r\n    CacheList.prototype.removeNode = function (node) {\r\n        node.prevNode.nextNode = node.nextNode;\r\n        node.nextNode.prevNode = node.prevNode;\r\n        node.prevNode = null;\r\n        node.nextNode = null;\r\n        this.length = this.length - 1;\r\n    };\r\n    /**\r\n     * @return true if list is empty\r\n     */\r\n    CacheList.prototype.isEmpty = function () {\r\n        return this.length === 0;\r\n    };\r\n    /**\r\n     * refresh node so it is rotated to the head\r\n     *\r\n     * @param key - key of the node\r\n     */\r\n    CacheList.prototype.refresh = function (key) {\r\n        var node = this.hashtable[key];\r\n        this.removeNode(node);\r\n        this.insertNodeToHead(node);\r\n    };\r\n    /**\r\n     * insert new node to the head and add it in the hashtable\r\n     *\r\n     * @param key - the key of the node\r\n     */\r\n    CacheList.prototype.insertItem = function (key) {\r\n        var node = new DoubleLinkedNode(key);\r\n        this.hashtable[key] = node;\r\n        this.insertNodeToHead(node);\r\n    };\r\n    /**\r\n     * @return the LAST Recently Visited key\r\n     */\r\n    CacheList.prototype.getLastItem = function () {\r\n        return this.tail.prevNode.key;\r\n    };\r\n    /**\r\n     * remove the cache key from the list and hashtable\r\n     * @param key - the key of the node\r\n     */\r\n    CacheList.prototype.removeItem = function (key) {\r\n        var removedItem = this.hashtable[key];\r\n        this.removeNode(removedItem);\r\n        delete this.hashtable[key];\r\n    };\r\n    /**\r\n     * @return length of the list\r\n     */\r\n    CacheList.prototype.getSize = function () {\r\n        return this.length;\r\n    };\r\n    /**\r\n     * @return true if the key is in the hashtable\r\n     * @param key\r\n     */\r\n    CacheList.prototype.containsKey = function (key) {\r\n        return key in this.hashtable;\r\n    };\r\n    /**\r\n     * clean up the list and hashtable\r\n     */\r\n    CacheList.prototype.clearList = function () {\r\n        for (var _i = 0, _a = Object.keys(this.hashtable); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            if (this.hashtable.hasOwnProperty(key)) {\r\n                delete this.hashtable[key];\r\n            }\r\n        }\r\n        this.head.nextNode = this.tail;\r\n        this.tail.prevNode = this.head;\r\n        this.length = 0;\r\n    };\r\n    /**\r\n     * @return all keys in the hashtable\r\n     */\r\n    CacheList.prototype.getKeys = function () {\r\n        return Object.keys(this.hashtable);\r\n    };\r\n    /**\r\n     * mainly for test\r\n     *\r\n     * @param key\r\n     * @return true if key is the head node\r\n     */\r\n    CacheList.prototype.isHeadNode = function (key) {\r\n        var node = this.hashtable[key];\r\n        return (node.prevNode === this.head);\r\n    };\r\n    /**\r\n     * mainly for test\r\n     *\r\n     * @param key\r\n     * @return true if key is the tail node\r\n     */\r\n    CacheList.prototype.isTailNode = function (key) {\r\n        var node = this.hashtable[key];\r\n        return (node.nextNode === this.tail);\r\n    };\r\n    return CacheList;\r\n}());\r\nexport default CacheList;\r\n//# sourceMappingURL=CacheList.js.map","map":"{\"version\":3,\"file\":\"CacheList.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/Cache/Utils/CacheList.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/wezhuo/workplace/aws-amplify/packages/aws-amplify/Cache/Utils/CacheList.d.ts","text":"/**\r\n * double linked list plus a hash table inside\r\n * each key in the cache stored as a node in the list\r\n * recently visited node will be rotated to the head\r\n * so the Last Recently Visited node will be at the tail\r\n *\r\n * @member head - dummy head of the linked list\r\n * @member tail - dummy tail of the linked list\r\n * @member hashtable - the hashtable which maps cache key to list node\r\n * @member length - length of the list\r\n */\r\nexport default class CacheList {\r\n    private head;\r\n    private tail;\r\n    private hashtable;\r\n    private length;\r\n    /**\r\n     * initialization\r\n     */\r\n    constructor();\r\n    /**\r\n     * insert node to the head of the list\r\n     *\r\n     * @param node\r\n     */\r\n    private insertNodeToHead(node);\r\n    /**\r\n     * remove node\r\n     *\r\n     * @param node\r\n     */\r\n    private removeNode(node);\r\n    /**\r\n     * @return true if list is empty\r\n     */\r\n    isEmpty(): boolean;\r\n    /**\r\n     * refresh node so it is rotated to the head\r\n     *\r\n     * @param key - key of the node\r\n     */\r\n    refresh(key: string): void;\r\n    /**\r\n     * insert new node to the head and add it in the hashtable\r\n     *\r\n     * @param key - the key of the node\r\n     */\r\n    insertItem(key: string): void;\r\n    /**\r\n     * @return the LAST Recently Visited key\r\n     */\r\n    getLastItem(): string;\r\n    /**\r\n     * remove the cache key from the list and hashtable\r\n     * @param key - the key of the node\r\n     */\r\n    removeItem(key: string): void;\r\n    /**\r\n     * @return length of the list\r\n     */\r\n    getSize(): number;\r\n    /**\r\n     * @return true if the key is in the hashtable\r\n     * @param key\r\n     */\r\n    containsKey(key: string): boolean;\r\n    /**\r\n     * clean up the list and hashtable\r\n     */\r\n    clearList(): void;\r\n    /**\r\n     * @return all keys in the hashtable\r\n     */\r\n    getKeys(): string[];\r\n    /**\r\n     * mainly for test\r\n     *\r\n     * @param key\r\n     * @return true if key is the head node\r\n     */\r\n    isHeadNode(key: string): boolean;\r\n    /**\r\n     * mainly for test\r\n     *\r\n     * @param key\r\n     * @return true if key is the tail node\r\n     */\r\n    isTailNode(key: string): boolean;\r\n}\r\n"}}
