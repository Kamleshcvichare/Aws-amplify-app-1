{"code":"import * as tslib_1 from \"tslib\";\r\n/*\r\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport { Client, Message } from 'paho-mqtt';\r\nimport { v4 as uuid } from 'uuid';\r\nimport * as Observable from 'zen-observable';\r\nglobal.Paho = global.Paho || { MQTT: { Client: Client, Message: Message } };\r\nimport { AbstractPubSubProvider } from './PubSubProvider';\r\nimport { ConsoleLogger as Logger } from '../../Common/Logger';\r\nvar logger = new Logger('MqttOverWSProvider');\r\nvar ClientsQueue = /** @class */ (function () {\r\n    function ClientsQueue() {\r\n        this.promises = new Map();\r\n    }\r\n    ClientsQueue.prototype.get = function (clientId, clientFactory) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var promise;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                promise = this.promises.get(clientId);\r\n                if (promise) {\r\n                    return [2 /*return*/, promise];\r\n                }\r\n                promise = clientFactory(clientId);\r\n                this.promises.set(clientId, promise);\r\n                return [2 /*return*/, promise];\r\n            });\r\n        });\r\n    };\r\n    ClientsQueue.prototype.remove = function (clientId) {\r\n        this.promises.delete(clientId);\r\n    };\r\n    return ClientsQueue;\r\n}());\r\nvar MqttOverWSProvider = /** @class */ (function (_super) {\r\n    tslib_1.__extends(MqttOverWSProvider, _super);\r\n    function MqttOverWSProvider(options) {\r\n        if (options === void 0) { options = {}; }\r\n        var _this = _super.call(this, tslib_1.__assign({}, options, { clientId: options.clientId || uuid() })) || this;\r\n        _this.clientsQueue = new ClientsQueue();\r\n        _this._topicObservers = new Map();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\r\n        get: function () { return this.options.clientId; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\r\n        get: function () { return this.options.aws_pubsub_endpoint; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MqttOverWSProvider.prototype.getProviderName = function () { return 'MqttOverWSProvider'; };\r\n    MqttOverWSProvider.prototype.newClient = function (_a) {\r\n        var url = _a.url, clientId = _a.clientId;\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var client;\r\n            return tslib_1.__generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        logger.debug('Creating new MQTT client', clientId);\r\n                        client = new Client(url, clientId);\r\n                        // client.trace = (...args) => logger.debug(clientId, ...args);\r\n                        client.onMessageArrived = function (_a) {\r\n                            var topic = _a.destinationName, msg = _a.payloadString;\r\n                            _this._onMessage(topic, msg);\r\n                        };\r\n                        client.onConnectionLost = logger.info.bind(logger);\r\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\r\n                                client.connect({\r\n                                    useSSL: true,\r\n                                    mqttVersion: 3,\r\n                                    onSuccess: function () { return resolve(client); },\r\n                                    onFailure: reject,\r\n                                });\r\n                            })];\r\n                    case 1:\r\n                        _b.sent();\r\n                        return [2 /*return*/, client];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MqttOverWSProvider.prototype.connect = function (clientId, options) {\r\n        if (options === void 0) { options = {}; }\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) { return _this.newClient(tslib_1.__assign({}, options, { clientId: clientId })); })];\r\n                    case 1: return [2 /*return*/, _a.sent()];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MqttOverWSProvider.prototype.disconnect = function (clientId) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var client;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function () { return null; })];\r\n                    case 1:\r\n                        client = _a.sent();\r\n                        if (client) {\r\n                            client.disconnect();\r\n                            this.clientsQueue.remove(clientId);\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MqttOverWSProvider.prototype.publish = function (topics, msg) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var targetTopics, message, url, client;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        targetTopics = [].concat(topics);\r\n                        message = JSON.stringify(msg);\r\n                        return [4 /*yield*/, this.endpoint];\r\n                    case 1:\r\n                        url = _a.sent();\r\n                        return [4 /*yield*/, this.connect(this.clientId, { url: url })];\r\n                    case 2:\r\n                        client = _a.sent();\r\n                        logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\r\n                        targetTopics.forEach(function (topic) { return client.send(topic, message); });\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\r\n        try {\r\n            var observersForTopic = this._topicObservers.get(topic) || new Set();\r\n            var parsedMessage_1 = JSON.parse(msg);\r\n            observersForTopic.forEach(function (observer) { return observer.next(parsedMessage_1); });\r\n        }\r\n        catch (error) {\r\n            logger.warn('Error handling message', error, msg);\r\n        }\r\n    };\r\n    MqttOverWSProvider.prototype.subscribe = function (topics, options) {\r\n        var _this = this;\r\n        if (options === void 0) { options = {}; }\r\n        var targetTopics = [].concat(topics);\r\n        logger.debug('Subscribing to topic(s)', targetTopics.join(','));\r\n        return new Observable(function (observer) {\r\n            targetTopics.forEach(function (topic) {\r\n                var observersForTopic = _this._topicObservers.get(topic);\r\n                if (!observersForTopic) {\r\n                    observersForTopic = new Set();\r\n                    _this._topicObservers.set(topic, observersForTopic);\r\n                }\r\n                observersForTopic.add(observer);\r\n            });\r\n            var client;\r\n            var _a = options.clientId, clientId = _a === void 0 ? _this.clientId : _a;\r\n            (function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {\r\n                var _a, url, _b;\r\n                return tslib_1.__generator(this, function (_c) {\r\n                    switch (_c.label) {\r\n                        case 0:\r\n                            _a = options.url;\r\n                            if (!(_a === void 0)) return [3 /*break*/, 2];\r\n                            return [4 /*yield*/, this.endpoint];\r\n                        case 1:\r\n                            _b = _c.sent();\r\n                            return [3 /*break*/, 3];\r\n                        case 2:\r\n                            _b = _a;\r\n                            _c.label = 3;\r\n                        case 3:\r\n                            url = _b;\r\n                            return [4 /*yield*/, this.connect(clientId, { url: url })];\r\n                        case 4:\r\n                            client = _c.sent();\r\n                            targetTopics.forEach(function (topic) { client.subscribe(topic); });\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            }); })();\r\n            return function () {\r\n                logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\r\n                if (client) {\r\n                    targetTopics.forEach(function (topic) {\r\n                        client.unsubscribe(topic);\r\n                        var observersForTopic = _this._topicObservers.get(topic) ||\r\n                            new Set();\r\n                        observersForTopic.forEach(function (observer) { return observer.complete(); });\r\n                        observersForTopic.clear();\r\n                    });\r\n                    _this.disconnect(clientId);\r\n                }\r\n                return null;\r\n            };\r\n        });\r\n    };\r\n    return MqttOverWSProvider;\r\n}(AbstractPubSubProvider));\r\nexport { MqttOverWSProvider };\r\n//# sourceMappingURL=MqttOverWSProvider.js.map","map":"{\"version\":3,\"file\":\"MqttOverWSProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/PubSub/Providers/MqttOverWSProvider.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/wezhuo/workplace/aws-amplify/packages/aws-amplify/PubSub/Providers/MqttOverWSProvider.d.ts","text":"/// <reference types=\"paho-mqtt\" />\r\n/// <reference types=\"zen-observable\" />\r\nimport { Client } from 'paho-mqtt';\r\nimport * as Observable from 'zen-observable';\r\nimport { AbstractPubSubProvider } from './PubSubProvider';\r\nexport interface MqttProvidertOptions {\r\n    clientId?: string;\r\n    url?: string;\r\n}\r\nexport declare class MqttOverWSProvider extends AbstractPubSubProvider {\r\n    private clientsQueue;\r\n    constructor(options?: MqttProvidertOptions);\r\n    protected readonly clientId: any;\r\n    protected readonly endpoint: any;\r\n    getProviderName(): string;\r\n    newClient({url, clientId}: MqttProvidertOptions): Promise<Client>;\r\n    protected connect(clientId: string, options?: MqttProvidertOptions): Promise<Client>;\r\n    protected disconnect(clientId: string): Promise<void>;\r\n    publish(topics: string[] | string, msg: any): Promise<void>;\r\n    private _topicObservers;\r\n    private _onMessage(topic, msg);\r\n    subscribe(topics: string[] | string, options?: MqttProvidertOptions): Observable<any>;\r\n}\r\n"}}
