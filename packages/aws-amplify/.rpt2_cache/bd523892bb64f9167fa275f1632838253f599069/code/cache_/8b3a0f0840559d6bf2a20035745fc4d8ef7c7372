{"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nvar LOG_LEVELS = {\r\n    VERBOSE: 1,\r\n    DEBUG: 2,\r\n    INFO: 3,\r\n    WARN: 4,\r\n    ERROR: 5\r\n};\r\n/**\r\n* Write logs\r\n* @class Logger\r\n*/\r\nvar ConsoleLogger = /** @class */ (function () {\r\n    /**\r\n    * @constructor\r\n    * @param {string} name - Name of the logger\r\n    */\r\n    function ConsoleLogger(name, level) {\r\n        if (level === void 0) { level = 'WARN'; }\r\n        this.name = name;\r\n        this.level = level;\r\n    }\r\n    ConsoleLogger.prototype._padding = function (n) {\r\n        return n < 10 ? '0' + n : '' + n;\r\n    };\r\n    ConsoleLogger.prototype._ts = function () {\r\n        var dt = new Date();\r\n        return [\r\n            this._padding(dt.getMinutes()),\r\n            this._padding(dt.getSeconds())\r\n        ].join(':') + '.' + dt.getMilliseconds();\r\n    };\r\n    /**\r\n    * Write log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string} type - log type, default INFO\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype._log = function (type) {\r\n        var msg = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            msg[_i - 1] = arguments[_i];\r\n        }\r\n        var logger_level_name = this.level;\r\n        if (ConsoleLogger.LOG_LEVEL) {\r\n            logger_level_name = ConsoleLogger.LOG_LEVEL;\r\n        }\r\n        if ((typeof window !== 'undefined') && window.LOG_LEVEL) {\r\n            logger_level_name = window.LOG_LEVEL;\r\n        }\r\n        var logger_level = LOG_LEVELS[logger_level_name];\r\n        var type_level = LOG_LEVELS[type];\r\n        if (!(type_level >= logger_level)) {\r\n            // Do nothing if type is not greater than or equal to logger level (handle undefined)\r\n            return;\r\n        }\r\n        var log = console.log.bind(console);\r\n        // if (type === 'ERROR' && console.error) { log = console.error.bind(console); }\r\n        if (type === 'WARN' && console.warn) {\r\n            log = console.warn.bind(console);\r\n        }\r\n        if (msg.length === 1 && typeof msg[0] === 'string') {\r\n            var output = [\r\n                '[' + type + ']',\r\n                this._ts(),\r\n                this.name,\r\n                '-',\r\n                msg[0]\r\n            ].join(' ');\r\n            log(output);\r\n        }\r\n        else if (msg.length === 1) {\r\n            var output = {};\r\n            var key = '[' + type + '] ' + this._ts() + ' ' + this.name;\r\n            output[key] = msg[0];\r\n            log(output);\r\n        }\r\n        else if (typeof msg[0] === 'string') {\r\n            var obj = msg.slice(1);\r\n            if (obj.length === 1) {\r\n                obj = obj[0];\r\n            }\r\n            var output = {};\r\n            var key = '[' + type + '] ' + this._ts() + ' ' + this.name + ' - ' + msg[0];\r\n            output[key] = obj;\r\n            log(output);\r\n        }\r\n        else {\r\n            var output = {};\r\n            var key = '[' + type + '] ' + this._ts() + ' ' + this.name;\r\n            output[key] = msg;\r\n            log(output);\r\n        }\r\n    };\r\n    /**\r\n    * Write General log. Default to INFO\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype.log = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, ['INFO'].concat(msg));\r\n    };\r\n    /**\r\n    * Write INFO log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype.info = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, ['INFO'].concat(msg));\r\n    };\r\n    /**\r\n    * Write WARN log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype.warn = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, ['WARN'].concat(msg));\r\n    };\r\n    /**\r\n    * Write ERROR log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype.error = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, ['ERROR'].concat(msg));\r\n    };\r\n    /**\r\n    * Write DEBUG log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype.debug = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, ['DEBUG'].concat(msg));\r\n    };\r\n    /**\r\n    * Write VERBOSE log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    ConsoleLogger.prototype.verbose = function () {\r\n        var msg = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            msg[_i] = arguments[_i];\r\n        }\r\n        this._log.apply(this, ['VERBOSE'].concat(msg));\r\n    };\r\n    ConsoleLogger.LOG_LEVEL = null;\r\n    return ConsoleLogger;\r\n}());\r\nexport { ConsoleLogger };\r\n//# sourceMappingURL=ConsoleLogger.js.map","map":"{\"version\":3,\"file\":\"ConsoleLogger.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/Common/Logger/ConsoleLogger.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/wezhuo/workplace/aws-amplify/packages/aws-amplify/Common/Logger/ConsoleLogger.d.ts","text":"import { Logger } from './logger-interface';\r\n/**\r\n* Write logs\r\n* @class Logger\r\n*/\r\nexport declare class ConsoleLogger implements Logger {\r\n    name: string;\r\n    level: string;\r\n    /**\r\n    * @constructor\r\n    * @param {string} name - Name of the logger\r\n    */\r\n    constructor(name: any, level?: string);\r\n    static LOG_LEVEL: any;\r\n    _padding(n: any): string;\r\n    _ts(): string;\r\n    /**\r\n    * Write log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string} type - log type, default INFO\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    _log(type: string, ...msg: any[]): void;\r\n    /**\r\n    * Write General log. Default to INFO\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    log(...msg: any[]): void;\r\n    /**\r\n    * Write INFO log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    info(...msg: any[]): void;\r\n    /**\r\n    * Write WARN log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    warn(...msg: any[]): void;\r\n    /**\r\n    * Write ERROR log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    error(...msg: any[]): void;\r\n    /**\r\n    * Write DEBUG log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    debug(...msg: any[]): void;\r\n    /**\r\n    * Write VERBOSE log\r\n    * @method\r\n    * @memeberof Logger\r\n    * @param {string|object} msg - Logging message or object\r\n    */\r\n    verbose(...msg: any[]): void;\r\n}\r\n"}}
