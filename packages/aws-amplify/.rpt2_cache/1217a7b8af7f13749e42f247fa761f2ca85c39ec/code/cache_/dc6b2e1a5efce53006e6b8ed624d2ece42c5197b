{"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { defaultConfig, getCurrTime } from './Utils';\r\nimport StorageCache from './StorageCache';\r\nimport { ConsoleLogger as Logger } from '../Common';\r\nvar logger = new Logger('Cache');\r\n/**\r\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\r\n */\r\nvar BrowserStorageCache = /** @class */ (function (_super) {\r\n    tslib_1.__extends(BrowserStorageCache, _super);\r\n    /**\r\n     * initialize the cache\r\n     * @param config - the configuration of the cache\r\n     */\r\n    function BrowserStorageCache(config) {\r\n        var _this = this;\r\n        var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\r\n        _this = _super.call(this, cacheConfig) || this;\r\n        _this.config.storage = cacheConfig.storage;\r\n        logger.debug('Using AsyncStorageCache');\r\n        return _this;\r\n    }\r\n    /**\r\n     * decrease current size of the cache\r\n     *\r\n     * @private\r\n     * @param amount - the amount of the cache size which needs to be decreased\r\n     */\r\n    BrowserStorageCache.prototype._decreaseCurSizeInBytes = function (amount) {\r\n        var curSize = this.getCacheCurSize();\r\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\r\n    };\r\n    /**\r\n     * increase current size of the cache\r\n     *\r\n     * @private\r\n     * @param amount - the amount of the cache szie which need to be increased\r\n     */\r\n    BrowserStorageCache.prototype._increaseCurSizeInBytes = function (amount) {\r\n        var curSize = this.getCacheCurSize();\r\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\r\n    };\r\n    /**\r\n     * update the visited time if item has been visited\r\n     *\r\n     * @private\r\n     * @param item - the item which need to be refreshed\r\n     * @param prefixedKey - the key of the item\r\n     *\r\n     * @return the refreshed item\r\n     */\r\n    BrowserStorageCache.prototype._refreshItem = function (item, prefixedKey) {\r\n        item.visitedTime = getCurrTime();\r\n        this.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n        return item;\r\n    };\r\n    /**\r\n     * check wether item is expired\r\n     *\r\n     * @private\r\n     * @param key - the key of the item\r\n     *\r\n     * @return true if the item is expired.\r\n     */\r\n    BrowserStorageCache.prototype._isExpired = function (key) {\r\n        var text = this.config.storage.getItem(key);\r\n        var item = JSON.parse(text);\r\n        if (getCurrTime() >= item.expires) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * delete item from cache\r\n     *\r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param size - optional, the byte size of the item\r\n     */\r\n    BrowserStorageCache.prototype._removeItem = function (prefixedKey, size) {\r\n        var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\r\n        this._decreaseCurSizeInBytes(itemSize);\r\n        // remove the cache item\r\n        this.config.storage.removeItem(prefixedKey);\r\n    };\r\n    /**\r\n     * put item into cache\r\n     *\r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param itemData - the value of the item\r\n     * @param itemSizeInBytes - the byte size of the item\r\n     */\r\n    BrowserStorageCache.prototype._setItem = function (prefixedKey, item) {\r\n        // update the cache size\r\n        this._increaseCurSizeInBytes(item.byteSize);\r\n        try {\r\n            this.config.storage.setItem(prefixedKey, JSON.stringify(item));\r\n        }\r\n        catch (setItemErr) {\r\n            // if failed, we need to rollback the cache size\r\n            this._decreaseCurSizeInBytes(item.byteSize);\r\n            logger.error(\"Failed to set item \" + setItemErr);\r\n        }\r\n    };\r\n    /**\r\n     * total space needed when poping out items\r\n     *\r\n     * @private\r\n     * @param itemSize\r\n     *\r\n     * @return total space needed\r\n     */\r\n    BrowserStorageCache.prototype._sizeToPop = function (itemSize) {\r\n        var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\r\n        var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\r\n        return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\r\n    };\r\n    /**\r\n     * see whether cache is full\r\n     *\r\n     * @private\r\n     * @param itemSize\r\n     *\r\n     * @return true if cache is full\r\n     */\r\n    BrowserStorageCache.prototype._isCacheFull = function (itemSize) {\r\n        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\r\n    };\r\n    /**\r\n     * scan the storage and find out all the keys owned by this cache\r\n     * also clean the expired keys while scanning\r\n     *\r\n     * @private\r\n     *\r\n     * @return array of keys\r\n     */\r\n    BrowserStorageCache.prototype._findValidKeys = function () {\r\n        var keys = [];\r\n        var keyInCache = [];\r\n        // get all keys in Storage\r\n        for (var i = 0; i < this.config.storage.length; i += 1) {\r\n            keyInCache.push(this.config.storage.key(i));\r\n        }\r\n        // find those items which belong to our cache and also clean those expired items\r\n        for (var i = 0; i < keyInCache.length; i += 1) {\r\n            var key = keyInCache[i];\r\n            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\r\n                if (this._isExpired(key)) {\r\n                    this._removeItem(key);\r\n                }\r\n                else {\r\n                    keys.push(key);\r\n                }\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     * get all the items we have, sort them by their priority,\r\n     * if priority is same, sort them by their last visited time\r\n     * pop out items from the low priority (5 is the lowest)\r\n     *\r\n     * @private\r\n     * @param keys - all the keys in this cache\r\n     * @param sizeToPop - the total size of the items which needed to be poped out\r\n     */\r\n    BrowserStorageCache.prototype._popOutItems = function (keys, sizeToPop) {\r\n        var items = [];\r\n        var remainedSize = sizeToPop;\r\n        // get the items from Storage\r\n        for (var i = 0; i < keys.length; i += 1) {\r\n            var val = this.config.storage.getItem(keys[i]);\r\n            if (val != null) {\r\n                var item = JSON.parse(val);\r\n                items.push(item);\r\n            }\r\n        }\r\n        // first compare priority\r\n        // then compare visited time\r\n        items.sort(function (a, b) {\r\n            if (a.priority > b.priority) {\r\n                return -1;\r\n            }\r\n            else if (a.priority < b.priority) {\r\n                return 1;\r\n            }\r\n            else {\r\n                if (a.visitedTime < b.visitedTime) {\r\n                    return -1;\r\n                }\r\n                else\r\n                    return 1;\r\n            }\r\n        });\r\n        for (var i = 0; i < items.length; i += 1) {\r\n            // pop out items until we have enough room for new item\r\n            this._removeItem(items[i].key, items[i].byteSize);\r\n            remainedSize -= items[i].byteSize;\r\n            if (remainedSize <= 0) {\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set item into cache. You can put number, string, boolean or object.\r\n     * The cache will first check whether has the same key.\r\n     * If it has, it will delete the old item and then put the new item in\r\n     * The cache will pop out items if it is full\r\n     * You can specify the cache item options. The cache will abort and output a warning:\r\n     * If the key is invalid\r\n     * If the size of the item exceeds itemMaxSize.\r\n     * If the value is undefined\r\n     * If incorrect cache item configuration\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param value - the value of the item\r\n     * @param {Object} [options] - optional, the specified meta-data\r\n     */\r\n    BrowserStorageCache.prototype.setItem = function (key, value, options) {\r\n        logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        // invalid keys\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\r\n            return;\r\n        }\r\n        if (typeof value === 'undefined') {\r\n            logger.warn(\"The value of item should not be undefined!\");\r\n            return;\r\n        }\r\n        var cacheItemOptions = {\r\n            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\r\n            expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\r\n        };\r\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\r\n            return;\r\n        }\r\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\r\n        // check wether this item is too big;\r\n        if (item.byteSize > this.config.itemMaxSize) {\r\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\r\n            return;\r\n        }\r\n        try {\r\n            // first look into the storage, if it exists, delete it.\r\n            var val = this.config.storage.getItem(prefixedKey);\r\n            if (val) {\r\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n            }\r\n            // check whether the cache is full\r\n            if (this._isCacheFull(item.byteSize)) {\r\n                var validKeys = this._findValidKeys();\r\n                // check again and then pop out items\r\n                if (this._isCacheFull(item.byteSize)) {\r\n                    var sizeToPop = this._sizeToPop(item.byteSize);\r\n                    this._popOutItems(validKeys, sizeToPop);\r\n                }\r\n            }\r\n            // put item in the cache\r\n            // may failed due to storage full\r\n            this._setItem(prefixedKey, item);\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"setItem failed! \" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Get item from cache. It will return null if item doesn’t exist or it has been expired.\r\n     * If you specified callback function in the options,\r\n     * then the function will be executed if no such item in the cache\r\n     * and finally put the return value into cache.\r\n     * Please make sure the callback function will return the value you want to put into the cache.\r\n     * The cache will abort output a warning:\r\n     * If the key is invalid\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param {Object} [options] - the options of callback function\r\n     *\r\n     * @return - return the value of the item\r\n     */\r\n    BrowserStorageCache.prototype.getItem = function (key, options) {\r\n        logger.log(\"Get item: key is \" + key + \" with options \" + options);\r\n        var ret = null;\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\r\n            return null;\r\n        }\r\n        try {\r\n            ret = this.config.storage.getItem(prefixedKey);\r\n            if (ret != null) {\r\n                if (this._isExpired(prefixedKey)) {\r\n                    // if expired, remove that item and return null\r\n                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\r\n                    ret = null;\r\n                }\r\n                else {\r\n                    // if not expired, great, return the value and refresh it\r\n                    var item = JSON.parse(ret);\r\n                    item = this._refreshItem(item, prefixedKey);\r\n                    return item.data;\r\n                }\r\n            }\r\n            if (options && options.callback !== undefined) {\r\n                var val = options.callback();\r\n                if (val !== null) {\r\n                    this.setItem(key, val, options);\r\n                }\r\n                return val;\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"getItem failed! \" + e);\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * remove item from the cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     * @param key - the key of the item\r\n     */\r\n    BrowserStorageCache.prototype.removeItem = function (key) {\r\n        logger.log(\"Remove item: key is \" + key);\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            return;\r\n        }\r\n        try {\r\n            var val = this.config.storage.getItem(prefixedKey);\r\n            if (val) {\r\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"removeItem failed! \" + e);\r\n        }\r\n    };\r\n    /**\r\n     * clear the entire cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     */\r\n    BrowserStorageCache.prototype.clear = function () {\r\n        logger.log(\"Clear Cache\");\r\n        var keysToRemove = [];\r\n        for (var i = 0; i < this.config.storage.length; i += 1) {\r\n            var key = this.config.storage.key(i);\r\n            if (key.indexOf(this.config.keyPrefix) === 0) {\r\n                keysToRemove.push(key);\r\n            }\r\n        }\r\n        try {\r\n            for (var i = 0; i < keysToRemove.length; i += 1) {\r\n                this.config.storage.removeItem(keysToRemove[i]);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.warn(\"clear failed! \" + e);\r\n        }\r\n    };\r\n    /**\r\n     * Return all the keys in the cache.\r\n     *\r\n     * @return - all keys in the cache\r\n     */\r\n    BrowserStorageCache.prototype.getAllKeys = function () {\r\n        var keys = [];\r\n        for (var i = 0; i < this.config.storage.length; i += 1) {\r\n            var key = this.config.storage.key(i);\r\n            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\r\n                keys.push(key.substring(this.config.keyPrefix.length));\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     * return the current size of the cache\r\n     *\r\n     * @return - current size of the cache\r\n     */\r\n    BrowserStorageCache.prototype.getCacheCurSize = function () {\r\n        var ret = this.config.storage.getItem(this.cacheCurSizeKey);\r\n        if (!ret) {\r\n            this.config.storage.setItem(this.cacheCurSizeKey, '0');\r\n            ret = '0';\r\n        }\r\n        return Number(ret);\r\n    };\r\n    /**\r\n     * Return a new instance of cache with customized configuration.\r\n     * @param config - the customized configuration\r\n     *\r\n     * @return - new instance of Cache\r\n     */\r\n    BrowserStorageCache.prototype.createInstance = function (config) {\r\n        if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\r\n            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\r\n            config.keyPrefix = getCurrTime.toString();\r\n        }\r\n        return new BrowserStorageCache(config);\r\n    };\r\n    return BrowserStorageCache;\r\n}(StorageCache));\r\nexport { BrowserStorageCache };\r\nvar instance = new BrowserStorageCache();\r\nexport default instance;\r\n//# sourceMappingURL=BrowserStorageCache.js.map","map":"{\"version\":3,\"file\":\"BrowserStorageCache.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/Cache/BrowserStorageCache.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/wezhuo/workplace/aws-amplify/packages/aws-amplify/Cache/BrowserStorageCache.d.ts","text":"import StorageCache from './StorageCache';\r\nimport { ICache, CacheConfig, CacheItemOptions } from './types';\r\n/**\r\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\r\n */\r\nexport declare class BrowserStorageCache extends StorageCache implements ICache {\r\n    /**\r\n     * initialize the cache\r\n     * @param config - the configuration of the cache\r\n     */\r\n    constructor(config?: CacheConfig);\r\n    /**\r\n     * decrease current size of the cache\r\n     *\r\n     * @private\r\n     * @param amount - the amount of the cache size which needs to be decreased\r\n     */\r\n    private _decreaseCurSizeInBytes(amount);\r\n    /**\r\n     * increase current size of the cache\r\n     *\r\n     * @private\r\n     * @param amount - the amount of the cache szie which need to be increased\r\n     */\r\n    private _increaseCurSizeInBytes(amount);\r\n    /**\r\n     * update the visited time if item has been visited\r\n     *\r\n     * @private\r\n     * @param item - the item which need to be refreshed\r\n     * @param prefixedKey - the key of the item\r\n     *\r\n     * @return the refreshed item\r\n     */\r\n    private _refreshItem(item, prefixedKey);\r\n    /**\r\n     * check wether item is expired\r\n     *\r\n     * @private\r\n     * @param key - the key of the item\r\n     *\r\n     * @return true if the item is expired.\r\n     */\r\n    private _isExpired(key);\r\n    /**\r\n     * delete item from cache\r\n     *\r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param size - optional, the byte size of the item\r\n     */\r\n    private _removeItem(prefixedKey, size?);\r\n    /**\r\n     * put item into cache\r\n     *\r\n     * @private\r\n     * @param prefixedKey - the key of the item\r\n     * @param itemData - the value of the item\r\n     * @param itemSizeInBytes - the byte size of the item\r\n     */\r\n    private _setItem(prefixedKey, item);\r\n    /**\r\n     * total space needed when poping out items\r\n     *\r\n     * @private\r\n     * @param itemSize\r\n     *\r\n     * @return total space needed\r\n     */\r\n    private _sizeToPop(itemSize);\r\n    /**\r\n     * see whether cache is full\r\n     *\r\n     * @private\r\n     * @param itemSize\r\n     *\r\n     * @return true if cache is full\r\n     */\r\n    private _isCacheFull(itemSize);\r\n    /**\r\n     * scan the storage and find out all the keys owned by this cache\r\n     * also clean the expired keys while scanning\r\n     *\r\n     * @private\r\n     *\r\n     * @return array of keys\r\n     */\r\n    private _findValidKeys();\r\n    /**\r\n     * get all the items we have, sort them by their priority,\r\n     * if priority is same, sort them by their last visited time\r\n     * pop out items from the low priority (5 is the lowest)\r\n     *\r\n     * @private\r\n     * @param keys - all the keys in this cache\r\n     * @param sizeToPop - the total size of the items which needed to be poped out\r\n     */\r\n    private _popOutItems(keys, sizeToPop);\r\n    /**\r\n     * Set item into cache. You can put number, string, boolean or object.\r\n     * The cache will first check whether has the same key.\r\n     * If it has, it will delete the old item and then put the new item in\r\n     * The cache will pop out items if it is full\r\n     * You can specify the cache item options. The cache will abort and output a warning:\r\n     * If the key is invalid\r\n     * If the size of the item exceeds itemMaxSize.\r\n     * If the value is undefined\r\n     * If incorrect cache item configuration\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param value - the value of the item\r\n     * @param {Object} [options] - optional, the specified meta-data\r\n     */\r\n    setItem(key: string, value: object | number | string | boolean, options?: CacheItemOptions): void;\r\n    /**\r\n     * Get item from cache. It will return null if item doesn’t exist or it has been expired.\r\n     * If you specified callback function in the options,\r\n     * then the function will be executed if no such item in the cache\r\n     * and finally put the return value into cache.\r\n     * Please make sure the callback function will return the value you want to put into the cache.\r\n     * The cache will abort output a warning:\r\n     * If the key is invalid\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param {Object} [options] - the options of callback function\r\n     *\r\n     * @return - return the value of the item\r\n     */\r\n    getItem(key: string, options?: CacheItemOptions): any;\r\n    /**\r\n     * remove item from the cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     * @param key - the key of the item\r\n     */\r\n    removeItem(key: string): void;\r\n    /**\r\n     * clear the entire cache\r\n     * The cache will abort output a warning:\r\n     * If error happened with browser storage\r\n     */\r\n    clear(): void;\r\n    /**\r\n     * Return all the keys in the cache.\r\n     *\r\n     * @return - all keys in the cache\r\n     */\r\n    getAllKeys(): string[];\r\n    /**\r\n     * return the current size of the cache\r\n     *\r\n     * @return - current size of the cache\r\n     */\r\n    getCacheCurSize(): number;\r\n    /**\r\n     * Return a new instance of cache with customized configuration.\r\n     * @param config - the customized configuration\r\n     *\r\n     * @return - new instance of Cache\r\n     */\r\n    createInstance(config: CacheConfig): ICache;\r\n}\r\ndeclare const instance: ICache;\r\nexport default instance;\r\n"}}
