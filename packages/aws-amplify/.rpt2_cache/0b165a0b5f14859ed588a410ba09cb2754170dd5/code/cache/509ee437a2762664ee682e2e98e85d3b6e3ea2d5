{"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { CacheList, defaultConfig, getCurrTime } from './Utils';\r\nimport StorageCache from './StorageCache';\r\nimport { ConsoleLogger as Logger } from '../Common';\r\nvar logger = new Logger('InMemoryCache');\r\n/**\r\n * provide an object as the in-memory cache\r\n */\r\nvar CacheObject = /** @class */ (function () {\r\n    function CacheObject() {\r\n        this.store = {};\r\n        logger.debug('Using InMemoryCache');\r\n    }\r\n    CacheObject.prototype.clear = function () {\r\n        this.store = {};\r\n    };\r\n    CacheObject.prototype.getItem = function (key) {\r\n        return this.store[key] || null;\r\n    };\r\n    CacheObject.prototype.setItem = function (key, value) {\r\n        if (key in this.store) {\r\n            this.removeItem(key);\r\n        }\r\n        this.store[key] = value;\r\n    };\r\n    CacheObject.prototype.removeItem = function (key) {\r\n        delete this.store[key];\r\n    };\r\n    CacheObject.prototype.showItems = function () {\r\n        var str = 'show items in mock cache: \\n';\r\n        for (var key in this.store) {\r\n            str += key + '\\n';\r\n        }\r\n        logger.info(str);\r\n    };\r\n    return CacheObject;\r\n}());\r\n/**\r\n * Customized in-memory cache with LRU implemented\r\n * @member cacheObj - object which store items\r\n * @member cacheList - list of keys in the cache with LRU\r\n * @member curSizeInBytes - current size of the cache\r\n * @member maxPriority - max of the priority\r\n * @member cacheSizeLimit - the limit of cache size\r\n */\r\nvar InMemoryCache = /** @class */ (function (_super) {\r\n    tslib_1.__extends(InMemoryCache, _super);\r\n    /**\r\n     * initialize the cache\r\n     *\r\n     * @param config - the configuration of the cache\r\n     */\r\n    function InMemoryCache(config) {\r\n        var _this = this;\r\n        var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\r\n        _this = _super.call(this, cacheConfig) || this;\r\n        logger.debug('now we start!');\r\n        _this.cacheObj = new CacheObject();\r\n        _this.cacheList = [];\r\n        _this.curSizeInBytes = 0;\r\n        _this.maxPriority = 5;\r\n        // initialize list for every priority\r\n        for (var i = 0; i < _this.maxPriority; i += 1) {\r\n            _this.cacheList[i] = new CacheList();\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * decrease current size of the cache\r\n     *\r\n     * @param amount - the amount of the cache size which needs to be decreased\r\n     */\r\n    InMemoryCache.prototype._decreaseCurSizeInBytes = function (amount) {\r\n        this.curSizeInBytes -= amount;\r\n    };\r\n    /**\r\n     * increase current size of the cache\r\n     *\r\n     * @param amount - the amount of the cache szie which need to be increased\r\n     */\r\n    InMemoryCache.prototype._increaseCurSizeInBytes = function (amount) {\r\n        this.curSizeInBytes += amount;\r\n    };\r\n    /**\r\n     * check wether item is expired\r\n     *\r\n     * @param key - the key of the item\r\n     *\r\n     * @return true if the item is expired.\r\n     */\r\n    InMemoryCache.prototype._isExpired = function (key) {\r\n        var text = this.cacheObj.getItem(key);\r\n        var item = JSON.parse(text);\r\n        if (getCurrTime() >= item.expires) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * delete item from cache\r\n     *\r\n     * @param prefixedKey - the key of the item\r\n     * @param listIdx - indicates which cache list the key belongs to\r\n     */\r\n    InMemoryCache.prototype._removeItem = function (prefixedKey, listIdx) {\r\n        // delete the key from the list\r\n        this.cacheList[listIdx].removeItem(prefixedKey);\r\n        // decrease the current size of the cache\r\n        this._decreaseCurSizeInBytes(JSON.parse(this.cacheObj.getItem(prefixedKey)).byteSize);\r\n        // finally remove the item from memory\r\n        this.cacheObj.removeItem(prefixedKey);\r\n    };\r\n    /**\r\n     * put item into cache\r\n     *\r\n     * @param prefixedKey - the key of the item\r\n     * @param itemData - the value of the item\r\n     * @param itemSizeInBytes - the byte size of the item\r\n     * @param listIdx - indicates which cache list the key belongs to\r\n     */\r\n    InMemoryCache.prototype._setItem = function (prefixedKey, item, listIdx) {\r\n        // insert the key into the list\r\n        this.cacheList[listIdx].insertItem(prefixedKey);\r\n        // increase the current size of the cache\r\n        this._increaseCurSizeInBytes(item.byteSize);\r\n        // finally add the item into memory\r\n        this.cacheObj.setItem(prefixedKey, JSON.stringify(item));\r\n    };\r\n    /**\r\n     * see whether cache is full\r\n     *\r\n     * @param itemSize\r\n     *\r\n     * @return true if cache is full\r\n     */\r\n    InMemoryCache.prototype._isCacheFull = function (itemSize) {\r\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\r\n    };\r\n    /**\r\n     * check whether the cache contains the key\r\n     *\r\n     * @param key\r\n     */\r\n    InMemoryCache.prototype.containsKey = function (key) {\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        for (var i = 0; i < this.maxPriority; i += 1) {\r\n            if (this.cacheList[i].containsKey(prefixedKey)) {\r\n                return i + 1;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    /**\r\n     * * Set item into cache. You can put number, string, boolean or object.\r\n     * The cache will first check whether has the same key.\r\n     * If it has, it will delete the old item and then put the new item in\r\n     * The cache will pop out items if it is full\r\n     * You can specify the cache item options. The cache will abort and output a warning:\r\n     * If the key is invalid\r\n     * If the size of the item exceeds itemMaxSize.\r\n     * If the value is undefined\r\n     * If incorrect cache item configuration\r\n     * If error happened with browser storage\r\n     *\r\n     * @param key - the key of the item\r\n     * @param value - the value of the item\r\n     * @param options - optional, the specified meta-data\r\n     *\r\n     * @throws if the item is too big which exceeds the limit of single item size\r\n     * @throws if the key is invalid\r\n     */\r\n    InMemoryCache.prototype.setItem = function (key, value, options) {\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        // invalid keys\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\r\n            return;\r\n        }\r\n        if ((typeof value) === 'undefined') {\r\n            logger.warn(\"The value of item should not be undefined!\");\r\n            return;\r\n        }\r\n        var cacheItemOptions = {\r\n            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\r\n            expires: options && options.expires !== undefined ?\r\n                options.expires : (this.config.defaultTTL + getCurrTime())\r\n        };\r\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\r\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\r\n            return;\r\n        }\r\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\r\n        // check wether this item is too big;\r\n        if (item.byteSize > this.config.itemMaxSize) {\r\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\r\n            return;\r\n        }\r\n        // if key already in the cache, then delete it.\r\n        var presentKeyPrio = this.containsKey(key);\r\n        if (presentKeyPrio !== -1) {\r\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\r\n        }\r\n        // pop out items in the cache when cache is full based on LRU\r\n        // first start from lowest priority cache list\r\n        var cacheListIdx = this.maxPriority - 1;\r\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\r\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\r\n                var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\r\n                this._removeItem(popedItemKey, cacheListIdx);\r\n            }\r\n            else {\r\n                cacheListIdx -= 1;\r\n            }\r\n        }\r\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\r\n    };\r\n    /**\r\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\r\n     * If you specified callback function in the options,\r\n     * then the function will be executed if no such item in the cache\r\n     * and finally put the return value into cache.\r\n     * Please make sure the callback function will return the value you want to put into the cache.\r\n     * The cache will abort output a warning:\r\n     * If the key is invalid\r\n     *\r\n     * @param key - the key of the item\r\n     * @param options - the options of callback function\r\n     */\r\n    InMemoryCache.prototype.getItem = function (key, options) {\r\n        var ret = null;\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\r\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\r\n            return null;\r\n        }\r\n        // check whether it's in the cachelist\r\n        var presentKeyPrio = this.containsKey(key);\r\n        if (presentKeyPrio !== -1) {\r\n            if (this._isExpired(prefixedKey)) {\r\n                // if expired, remove that item and return null\r\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\r\n            }\r\n            else {\r\n                // if not expired, great, return the value and refresh it\r\n                ret = this.cacheObj.getItem(prefixedKey);\r\n                var item = JSON.parse(ret);\r\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\r\n                return item.data;\r\n            }\r\n        }\r\n        if (options && options.callback !== undefined) {\r\n            var val = options.callback();\r\n            if (val !== null) {\r\n                this.setItem(key, val, options);\r\n            }\r\n            return val;\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * remove item from the cache\r\n     *\r\n     * @param key - the key of the item\r\n     */\r\n    InMemoryCache.prototype.removeItem = function (key) {\r\n        var prefixedKey = this.config.keyPrefix + key;\r\n        // check if the key is in the cache\r\n        var presentKeyPrio = this.containsKey(key);\r\n        if (presentKeyPrio !== -1) {\r\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\r\n        }\r\n    };\r\n    /**\r\n     * clear the entire cache\r\n     */\r\n    InMemoryCache.prototype.clear = function () {\r\n        for (var i = 0; i < this.maxPriority; i += 1) {\r\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\r\n                var key = _a[_i];\r\n                this._removeItem(key, i);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Return all the keys in the cache.\r\n     */\r\n    InMemoryCache.prototype.getAllKeys = function () {\r\n        var keys = [];\r\n        for (var i = 0; i < this.maxPriority; i += 1) {\r\n            for (var _i = 0, _a = this.cacheList[i].getKeys(); _i < _a.length; _i++) {\r\n                var key = _a[_i];\r\n                keys.push(key.substring(this.config.keyPrefix.length));\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n    /**\r\n     * return the current size of the cache\r\n     *\r\n     * @return the current size of the cache\r\n     */\r\n    InMemoryCache.prototype.getCacheCurSize = function () {\r\n        return this.curSizeInBytes;\r\n    };\r\n    /**\r\n     * Return a new instance of cache with customized configuration.\r\n     * @param config - the customized configuration\r\n     */\r\n    InMemoryCache.prototype.createInstance = function (config) {\r\n        return new InMemoryCache(config);\r\n    };\r\n    return InMemoryCache;\r\n}(StorageCache));\r\nexport { InMemoryCache };\r\nvar instance = new InMemoryCache();\r\nexport default instance;\r\n//# sourceMappingURL=InMemoryCache.js.map","map":"{\"version\":3,\"file\":\"InMemoryCache.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/Cache/InMemoryCache.ts\"],\"names\":[],\"mappings\":\"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\"}"}
