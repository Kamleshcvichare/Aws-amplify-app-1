{
	"Amplify Storage Import": {
		"prefix": "Storage.import",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"import Amplify, { Storage } from 'aws-amplify';\n"
		]
	},
	"Amplify Storage Import Configuration": {
		"prefix": "Storage:",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"import awsconfig from './aws-exports';",
			"Amplify.configure(awsconfig);",
		]
	},
	"Manual Storage Configuration": {
		"prefix": "Storage.configure",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Storage.configure({",
				"\tbucket: ${1:\"Your bucket ARN\"}",
				"\tregion: ${2:\"Specify the region your bucket was created in\"}",
				"\tidentityPoolId: ${3:\"Specify your identityPoolId for Auth and Unauth access to your bucket\"}",
			"});"
		]
	},
	"Storage Get": {
		"prefix": "Storage.get",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Storage.get(${1:'test.txt'}, {",
				"\tlevel: '${2:protected}'",
				"\tidentityId: \"${3:}\", // only in case of protected",
				"\tcontentType: \"${4:}\",",
				"\ttrack: ${5:false},",
				"\tdownload: ${6:false},",
			"})"
		]
	},
	"Storage Put": {
		"prefix": "Storage.put",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Storage.put(${1:'test.txt'}, ${2:'Protected Content'}, {",
                "\tlevel: ${3:'protected'},",
				"\tcontentType: ${4:''}",
    			"identityId: ${5:''}, // only in case of protected",
    			"track: ${6:false},",
			"})",
		]
	},
	"S3ImageUpload": {
		"prefix": "S3ImageUpload",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
            "class S3ImageUpload extends React.Component {",
                "\tonChange(e) {",
                "\t\tconst file = e.target.files[0];",
                "\t\tStorage.put('example.png', file, {",
                "\t\t\tcontentType: 'image/png'",
                "\t\t})",
                "\t\t.then (result => console.log(result))",
                "\t\t.catch(err => console.log(err));",
                "\t}",
                "\trender() {",
                "\t\treturn (",
                "\t\t\t<input",
                "\t\t\t\ttype=\"file\" accept='image/png'",
                "\t\t\t\tonChange={(evt) => this.onChange(evt)}",
                "\t\t\t/>",
                "\t\t)",
                "\t}",
            "}"
        ]
	},
	"Storage Remove": {
		"prefix": "Storage.remove",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Storage.remove(${1:'test.txt'}, {",
				"\tlevel: ${2:'protected'},",
				"\tidentityId: ${3:''} // only in case of protected",
			"})",

		]
	},
	"Storage List": {
		"prefix": "Storage.list",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"Storage.list(${1:'photos/'}, {",
				"\tlevel: ${2:'protected'}",
				"\tidentityId: ${3:''}, // only in case of protected",
				"\ttrack: ${4:false},",
			"})",
		]
	},
	"fileToKey": {
		"prefix": "fileToKey",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"const fileToKey = (data) => {",
			"\tconst { name, size, type } = data;",
			"\treturn 'test_' + name;",
			"}"
		]
	},
	"S3Album": {
		"prefix": "<S3Album",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"<S3Album",
			"\tlevel=${1:\"private\"}",
			"\tpath={path}",
			"\tfilter={(item) => ${2:/jpg/i.test(item.path)}}",
			"/>"
		]
	},
	"Custom Upload Path": {
		"prefix": "customPrefix",
		"scope": "javascript,javascriptreact,typescript,typescriptreact",
		"body": [
			"customPrefix: {",
			"\tpublic: ${1:'myPublicPrefix/'},",
			"\tprotected: ${2:'myProtectedPrefix/'},",
			"\tprivate: ${3:'myPrivatePrefix/'}",
			"};"
		]
	}
}
