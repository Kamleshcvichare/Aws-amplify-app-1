{"code":"/*\r\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport Signer from '../Common/Signer';\r\nimport { ConsoleLogger as Logger } from '../Common';\r\nimport Auth from '../Auth';\r\nimport axios from 'axios';\r\nimport Platform from '../Common/Platform';\r\nvar logger = new Logger('RestClient');\r\n/**\r\n* HTTP Client for REST requests. Send and receive JSON data.\r\n* Sign request with AWS credentials if available\r\n* Usage:\r\n<pre>\r\nconst restClient = new RestClient();\r\nrestClient.get('...')\r\n    .then(function(data) {\r\n        console.log(data);\r\n    })\r\n    .catch(err => console.log(err));\r\n</pre>\r\n*/\r\nvar RestClient = /** @class */ (function () {\r\n    /**\r\n    * @param {RestClientOptions} [options] - Instance options\r\n    */\r\n    function RestClient(options) {\r\n        this._region = 'us-east-1'; // this will be updated by config\r\n        this._service = 'execute-api'; // this can be updated by config\r\n        var endpoints = options.endpoints;\r\n        this._options = options;\r\n        logger.debug('API Options', this._options);\r\n    }\r\n    /**\r\n    * Update AWS credentials\r\n    * @param {AWSCredentials} credentials - AWS credentials\r\n    *\r\n    updateCredentials(credentials: AWSCredentials) {\r\n        this.options.credentials = credentials;\r\n    }\r\n*/\r\n    /**\r\n    * Basic HTTP request. Customizable\r\n    * @param {string} url - Full request URL\r\n    * @param {string} method - Request HTTP method\r\n    * @param {json} [init] - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.ajax = function (url, method, init) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            var parsed_url, params, libraryHeaders, userAgent, extraParams, isAllResponse;\r\n            return tslib_1.__generator(this, function (_a) {\r\n                logger.debug(method + ' ' + url);\r\n                parsed_url = this._parseUrl(url);\r\n                params = {\r\n                    method: method,\r\n                    url: url,\r\n                    host: parsed_url.host,\r\n                    path: parsed_url.path,\r\n                    headers: {},\r\n                    data: null\r\n                };\r\n                libraryHeaders = {};\r\n                if (Platform.isReactNative) {\r\n                    userAgent = Platform.userAgent || 'aws-amplify/0.1.x';\r\n                    libraryHeaders = {\r\n                        'User-Agent': userAgent\r\n                    };\r\n                }\r\n                extraParams = Object.assign({}, init);\r\n                isAllResponse = init ? init.response : null;\r\n                if (extraParams.body) {\r\n                    libraryHeaders['content-type'] = 'application/json; charset=UTF-8';\r\n                    params.data = JSON.stringify(extraParams.body);\r\n                }\r\n                params['signerServiceInfo'] = extraParams.signerServiceInfo;\r\n                params.headers = tslib_1.__assign({}, libraryHeaders, extraParams.headers);\r\n                // Do not sign the request if client has added 'Authorization' header,\r\n                // which means custom authorizer.\r\n                if (typeof params.headers['Authorization'] !== 'undefined') {\r\n                    params.headers = Object.keys(params.headers).reduce(function (acc, k) {\r\n                        if (params.headers[k]) {\r\n                            acc[k] = params.headers[k];\r\n                        }\r\n                        return acc;\r\n                        // tslint:disable-next-line:align\r\n                    }, {});\r\n                    return [2 /*return*/, this._request(params)];\r\n                }\r\n                return [2 /*return*/, Auth.currentCredentials()\r\n                        .then(function (credentials) { return _this._signed(params, credentials, isAllResponse); })];\r\n            });\r\n        });\r\n    };\r\n    /**\r\n    * GET HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {JSON} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.get = function (url, init) {\r\n        return this.ajax(url, 'GET', init);\r\n    };\r\n    /**\r\n    * PUT HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.put = function (url, init) {\r\n        return this.ajax(url, 'PUT', init);\r\n    };\r\n    /**\r\n    * PATCH HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.patch = function (url, init) {\r\n        return this.ajax(url, 'PATCH', init);\r\n    };\r\n    /**\r\n    * POST HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.post = function (url, init) {\r\n        return this.ajax(url, 'POST', init);\r\n    };\r\n    /**\r\n    * DELETE HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.del = function (url, init) {\r\n        return this.ajax(url, 'DELETE', init);\r\n    };\r\n    /**\r\n    * HEAD HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    RestClient.prototype.head = function (url, init) {\r\n        return this.ajax(url, 'HEAD', init);\r\n    };\r\n    /**\r\n    * Getting endpoint for API\r\n    * @param {string} apiName - The name of the api\r\n    * @return {string} - The endpoint of the api\r\n    */\r\n    RestClient.prototype.endpoint = function (apiName) {\r\n        var _this = this;\r\n        var cloud_logic_array = this._options.endpoints;\r\n        var response = '';\r\n        cloud_logic_array.forEach(function (v) {\r\n            if (v.name === apiName) {\r\n                response = v.endpoint;\r\n                if (typeof v.region === 'string') {\r\n                    _this._region = v.region;\r\n                }\r\n                else if (typeof _this._options.region === 'string') {\r\n                    _this._region = _this._options.region;\r\n                }\r\n                if (typeof v.service === 'string') {\r\n                    _this._service = v.service || 'execute-api';\r\n                }\r\n            }\r\n        });\r\n        return response;\r\n    };\r\n    /** private methods **/\r\n    RestClient.prototype._signed = function (params, credentials, isAllResponse) {\r\n        var signerServiceInfoParams = params.signerServiceInfo, otherParams = tslib_1.__rest(params, [\"signerServiceInfo\"]);\r\n        var endpoint_region = this._region || this._options.region;\r\n        var endpoint_service = this._service || this._options.service;\r\n        var creds = {\r\n            secret_key: credentials.secretAccessKey,\r\n            access_key: credentials.accessKeyId,\r\n            session_token: credentials.sessionToken,\r\n        };\r\n        var endpointInfo = {\r\n            region: endpoint_region,\r\n            service: endpoint_service,\r\n        };\r\n        var signerServiceInfo = Object.assign(endpointInfo, signerServiceInfoParams);\r\n        var signed_params = Signer.sign(otherParams, creds, signerServiceInfo);\r\n        if (signed_params.data) {\r\n            signed_params.body = signed_params.data;\r\n        }\r\n        logger.debug('Signed Request: ', signed_params);\r\n        delete signed_params.headers['host'];\r\n        return axios(signed_params)\r\n            .then(function (response) { return isAllResponse ? response : response.data; })\r\n            .catch(function (error) {\r\n            logger.debug(error);\r\n            throw error;\r\n        });\r\n    };\r\n    RestClient.prototype._request = function (params, isAllResponse) {\r\n        if (isAllResponse === void 0) { isAllResponse = false; }\r\n        return axios(params)\r\n            .then(function (response) { return isAllResponse ? response : response.data; })\r\n            .catch(function (error) {\r\n            logger.debug(error);\r\n            throw error;\r\n        });\r\n    };\r\n    RestClient.prototype._parseUrl = function (url) {\r\n        var parts = url.split('/');\r\n        return {\r\n            host: parts[2],\r\n            path: '/' + parts.slice(3).join('/')\r\n        };\r\n    };\r\n    return RestClient;\r\n}());\r\nexport { RestClient };\r\n//# sourceMappingURL=RestClient.js.map","map":"{\"version\":3,\"file\":\"RestClient.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/API/RestClient.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/wezhuo/workplace/aws-amplify/packages/aws-amplify/API/RestClient.d.ts","text":"import { apiOptions } from './types';\r\n/**\r\n* HTTP Client for REST requests. Send and receive JSON data.\r\n* Sign request with AWS credentials if available\r\n* Usage:\r\n<pre>\r\nconst restClient = new RestClient();\r\nrestClient.get('...')\r\n    .then(function(data) {\r\n        console.log(data);\r\n    })\r\n    .catch(err => console.log(err));\r\n</pre>\r\n*/\r\nexport declare class RestClient {\r\n    private _options;\r\n    private _region;\r\n    private _service;\r\n    /**\r\n    * @param {RestClientOptions} [options] - Instance options\r\n    */\r\n    constructor(options: apiOptions);\r\n    /**\r\n    * Update AWS credentials\r\n    * @param {AWSCredentials} credentials - AWS credentials\r\n    *\r\n    updateCredentials(credentials: AWSCredentials) {\r\n        this.options.credentials = credentials;\r\n    }\r\n*/\r\n    /**\r\n    * Basic HTTP request. Customizable\r\n    * @param {string} url - Full request URL\r\n    * @param {string} method - Request HTTP method\r\n    * @param {json} [init] - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    ajax(url: string, method: string, init: any): Promise<any>;\r\n    /**\r\n    * GET HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {JSON} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    get(url: string, init: any): Promise<any>;\r\n    /**\r\n    * PUT HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    put(url: string, init: any): Promise<any>;\r\n    /**\r\n    * PATCH HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    patch(url: string, init: any): Promise<any>;\r\n    /**\r\n    * POST HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    post(url: string, init: any): Promise<any>;\r\n    /**\r\n    * DELETE HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    del(url: string, init: any): Promise<any>;\r\n    /**\r\n    * HEAD HTTP request\r\n    * @param {string} url - Full request URL\r\n    * @param {json} init - Request extra params\r\n    * @return {Promise} - A promise that resolves to an object with response status and JSON data, if successful.\r\n    */\r\n    head(url: string, init: any): Promise<any>;\r\n    /**\r\n    * Getting endpoint for API\r\n    * @param {string} apiName - The name of the api\r\n    * @return {string} - The endpoint of the api\r\n    */\r\n    endpoint(apiName: string): string;\r\n    /** private methods **/\r\n    private _signed(params, credentials, isAllResponse);\r\n    private _request(params, isAllResponse?);\r\n    private _parseUrl(url);\r\n}\r\n"}}
